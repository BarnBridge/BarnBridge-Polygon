{
  "address": "0xc599e45DA4FB2cAb665C72232d4fd5254c770404",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SetAllowance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rootChainManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "erc20Predicate",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendToPolygon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d1fc0ab276af80a6cdc48fc65e6e5f83a4ceafba4566b408bd52c32e2db662f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB011D306D36c396847bA42b1c7AEb8E96C540d9a",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1227984",
    "logsBloom": "0x
    "blockHash": "0x876d5b5f853b0e6203401a6b4d4d0af8c5507fe75c638b72084b45c8b62f3e98",
    "transactionHash": "0x2d1fc0ab276af80a6cdc48fc65e6e5f83a4ceafba4566b408bd52c32e2db662f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14074815,
        "transactionHash": "0x2d1fc0ab276af80a6cdc48fc65e6e5f83a4ceafba4566b408bd52c32e2db662f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b011d306d36c396847ba42b1c7aeb8e96c540d9a",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000008b9b09c3840000000000000000000000000000000000000000000000000000268a54dfb3e680000000000000000000000000000000000000000000000007030c4041ed2d06b90000000000000000000000000000000000000000000000000025feb9d5f06280000000000000000000000000000000000000000000000007030ccbdcf6f08ab90",
        "logIndex": 0,
        "blockHash": "0x876d5b5f853b0e6203401a6b4d4d0af8c5507fe75c638b72084b45c8b62f3e98"
      }
    ],
    "blockNumber": 14074815,
    "cumulativeGasUsed": "1227984",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c58a44d5d859b0dd3fc3bbe091c74919",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetAllowance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rootChainManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Predicate\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToPolygon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolygonCommunityVault.sol\":\"PolygonCommunityVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/PolygonCommunityVault.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./matic/IRootChainManager.sol\\\";\\n\\ncontract PolygonCommunityVault is OwnableUpgradeable {\\n    IERC20 private _token;\\n    IRootChainManager _rootChainManager;\\n    address _erc20Predicate;\\n\\n    event SetAllowance(address indexed caller, address indexed spender, uint256 amount);\\n\\n    function initialize(address token, address rootChainManager, address erc20Predicate) initializer public {\\n        require(token != address(0), \\\"a valid token address must be provided\\\");\\n\\n        __Ownable_init();\\n\\n        _token = IERC20(token);\\n\\n        if (rootChainManager != address(0)) {\\n            require(erc20Predicate != address(0), \\\"if root chain manager is set, erc20 predicate must not be 0x0\\\");\\n\\n            _erc20Predicate = erc20Predicate;\\n            _rootChainManager = IRootChainManager(rootChainManager);\\n        }\\n     }\\n\\n    function setAllowance(address spender, uint amount) public onlyOwner {\\n        _token.approve(spender, amount);\\n\\n        emit SetAllowance(msg.sender, spender, amount);\\n    }\\n\\n    // TODO need to discuss if public or onlyOwner\\n    function sendToPolygon() public {\\n        require(_erc20Predicate != address(0), \\\"deposit to polygon must be enabled enabled on this vault\\\");\\n\\n        uint256 amount =_token.balanceOf(address(this));\\n        _token.approve(_erc20Predicate, amount);\\n        _rootChainManager.depositFor(address(this), address(_token), abi.encode(amount));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x40cdf0efec6ff8698d87febbc7c9701549917d080d5ff7c1e04b8ee90e488829\",\"license\":\"Apache-2.0\"},\"contracts/matic/IRootChainManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IRootChainManager {\\n    event TokenMapped(\\n        address indexed rootToken,\\n        address indexed childToken,\\n        bytes32 indexed tokenType\\n    );\\n\\n    event PredicateRegistered(\\n        bytes32 indexed tokenType,\\n        address indexed predicateAddress\\n    );\\n\\n    function registerPredicate(bytes32 tokenType, address predicateAddress)\\n        external;\\n\\n    function mapToken(\\n        address rootToken,\\n        address childToken,\\n        bytes32 tokenType\\n    ) external;\\n\\n    function cleanMapToken(\\n        address rootToken,\\n        address childToken\\n    ) external;\\n\\n    function remapToken(\\n        address rootToken,\\n        address childToken,\\n        bytes32 tokenType\\n    ) external;\\n\\n    function depositEtherFor(address user) external payable;\\n\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external;\\n\\n    function exit(bytes calldata inputData) external;\\n}\\n\",\"keccak256\":\"0x541a58b38c01441c5b90d64c127dc3148ecfd90034a590abeeb9ebfaee4b8242\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061154d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063310ec4a7146100675780634d94973114610083578063715018a61461008d5780638da5cb5b14610097578063c0c53b8b146100b5578063f2fde38b146100d1575b600080fd5b610081600480360381019061007c9190610f51565b6100ed565b005b61008b610282565b005b61009561056a565b005b61009f6106a7565b6040516100ac9190611108565b60405180910390f35b6100cf60048036038101906100ca9190610f02565b6106d1565b005b6100eb60048036038101906100e69190610ed9565b61098d565b005b6100f5610b39565b73ffffffffffffffffffffffffffffffffffffffff166101136106a7565b73ffffffffffffffffffffffffffffffffffffffff1614610169576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101609061120a565b60405180910390fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016101c6929190611161565b602060405180830381600087803b1580156101e057600080fd5b505af11580156101f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102189190610f8d565b508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3c07380f6fcae3bac39771c60e5c680334073911f2176b65f1d6925ba0badcdf83604051610276919061124a565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff16606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030b9061122a565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103719190611108565b60206040518083038186803b15801561038957600080fd5b505afa15801561039d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c19190610fb6565b9050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610442929190611161565b602060405180830381600087803b15801561045c57600080fd5b505af1158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190610f8d565b50606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e3dec8fb30606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684604051602001610508919061124a565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161053593929190611123565b600060405180830381600087803b15801561054f57600080fd5b505af1158015610563573d6000803e3d6000fd5b5050505050565b610572610b39565b73ffffffffffffffffffffffffffffffffffffffff166105906106a7565b73ffffffffffffffffffffffffffffffffffffffff16146105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd9061120a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff16806106f7575060008054906101000a900460ff16155b610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d906111aa565b60405180910390fd5b60008060019054906101000a900460ff161590508015610786576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed906111ca565b60405180910390fd5b6107fe610b41565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461096657600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da906111ea565b60405180910390fd5b81606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80156109875760008060016101000a81548160ff0219169083151502179055505b50505050565b610995610b39565b73ffffffffffffffffffffffffffffffffffffffff166109b36106a7565b73ffffffffffffffffffffffffffffffffffffffff1614610a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a009061120a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a709061118a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060019054906101000a900460ff1680610b67575060008054906101000a900460ff16155b610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d906111aa565b60405180910390fd5b60008060019054906101000a900460ff161590508015610bf6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610bfe610c2a565b610c06610d03565b8015610c275760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610c50575060008054906101000a900460ff16155b610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c86906111aa565b60405180910390fd5b60008060019054906101000a900460ff161590508015610cdf576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610d005760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610d29575060008054906101000a900460ff16155b610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f906111aa565b60405180910390fd5b60008060019054906101000a900460ff161590508015610db8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000610dc2610b39565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015610e825760008060016101000a81548160ff0219169083151502179055505b50565b600081359050610e94816114d2565b92915050565b600081519050610ea9816114e9565b92915050565b600081359050610ebe81611500565b92915050565b600081519050610ed381611500565b92915050565b600060208284031215610eeb57600080fd5b6000610ef984828501610e85565b91505092915050565b600080600060608486031215610f1757600080fd5b6000610f2586828701610e85565b9350506020610f3686828701610e85565b9250506040610f4786828701610e85565b9150509250925092565b60008060408385031215610f6457600080fd5b6000610f7285828601610e85565b9250506020610f8385828601610eaf565b9150509250929050565b600060208284031215610f9f57600080fd5b6000610fad84828501610e9a565b91505092915050565b600060208284031215610fc857600080fd5b6000610fd684828501610ec4565b91505092915050565b610fe881611292565b82525050565b6000610ff982611265565b6110038185611270565b93506110138185602086016112da565b61101c8161130d565b840191505092915050565b6000611034602683611281565b915061103f8261131e565b604082019050919050565b6000611057602e83611281565b91506110628261136d565b604082019050919050565b600061107a602683611281565b9150611085826113bc565b604082019050919050565b600061109d603d83611281565b91506110a88261140b565b604082019050919050565b60006110c0602083611281565b91506110cb8261145a565b602082019050919050565b60006110e3603883611281565b91506110ee82611483565b604082019050919050565b611102816112d0565b82525050565b600060208201905061111d6000830184610fdf565b92915050565b60006060820190506111386000830186610fdf565b6111456020830185610fdf565b81810360408301526111578184610fee565b9050949350505050565b60006040820190506111766000830185610fdf565b61118360208301846110f9565b9392505050565b600060208201905081810360008301526111a381611027565b9050919050565b600060208201905081810360008301526111c38161104a565b9050919050565b600060208201905081810360008301526111e38161106d565b9050919050565b6000602082019050818103600083015261120381611090565b9050919050565b60006020820190508181036000830152611223816110b3565b9050919050565b60006020820190508181036000830152611243816110d6565b9050919050565b600060208201905061125f60008301846110f9565b92915050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061129d826112b0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156112f85780820151818401526020810190506112dd565b83811115611307576000848401525b50505050565b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f612076616c696420746f6b656e2061646472657373206d75737420626520707260008201527f6f76696465640000000000000000000000000000000000000000000000000000602082015250565b7f696620726f6f7420636861696e206d616e61676572206973207365742c20657260008201527f63323020707265646963617465206d757374206e6f7420626520307830000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f6465706f73697420746f20706f6c79676f6e206d75737420626520656e61626c60008201527f656420656e61626c6564206f6e2074686973207661756c740000000000000000602082015250565b6114db81611292565b81146114e657600080fd5b50565b6114f2816112a4565b81146114fd57600080fd5b50565b611509816112d0565b811461151457600080fd5b5056fea26469706673582212206bfd4fe7aa7e1c920b147b536c3c29a1881c974422cc238805d7795e671b752164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063310ec4a7146100675780634d94973114610083578063715018a61461008d5780638da5cb5b14610097578063c0c53b8b146100b5578063f2fde38b146100d1575b600080fd5b610081600480360381019061007c9190610f51565b6100ed565b005b61008b610282565b005b61009561056a565b005b61009f6106a7565b6040516100ac9190611108565b60405180910390f35b6100cf60048036038101906100ca9190610f02565b6106d1565b005b6100eb60048036038101906100e69190610ed9565b61098d565b005b6100f5610b39565b73ffffffffffffffffffffffffffffffffffffffff166101136106a7565b73ffffffffffffffffffffffffffffffffffffffff1614610169576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101609061120a565b60405180910390fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016101c6929190611161565b602060405180830381600087803b1580156101e057600080fd5b505af11580156101f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102189190610f8d565b508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3c07380f6fcae3bac39771c60e5c680334073911f2176b65f1d6925ba0badcdf83604051610276919061124a565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff16606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030b9061122a565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103719190611108565b60206040518083038186803b15801561038957600080fd5b505afa15801561039d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c19190610fb6565b9050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610442929190611161565b602060405180830381600087803b15801561045c57600080fd5b505af1158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190610f8d565b50606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e3dec8fb30606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684604051602001610508919061124a565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161053593929190611123565b600060405180830381600087803b15801561054f57600080fd5b505af1158015610563573d6000803e3d6000fd5b5050505050565b610572610b39565b73ffffffffffffffffffffffffffffffffffffffff166105906106a7565b73ffffffffffffffffffffffffffffffffffffffff16146105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd9061120a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff16806106f7575060008054906101000a900460ff16155b610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d906111aa565b60405180910390fd5b60008060019054906101000a900460ff161590508015610786576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed906111ca565b60405180910390fd5b6107fe610b41565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461096657600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da906111ea565b60405180910390fd5b81606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80156109875760008060016101000a81548160ff0219169083151502179055505b50505050565b610995610b39565b73ffffffffffffffffffffffffffffffffffffffff166109b36106a7565b73ffffffffffffffffffffffffffffffffffffffff1614610a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a009061120a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a709061118a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060019054906101000a900460ff1680610b67575060008054906101000a900460ff16155b610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d906111aa565b60405180910390fd5b60008060019054906101000a900460ff161590508015610bf6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610bfe610c2a565b610c06610d03565b8015610c275760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610c50575060008054906101000a900460ff16155b610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c86906111aa565b60405180910390fd5b60008060019054906101000a900460ff161590508015610cdf576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015610d005760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680610d29575060008054906101000a900460ff16155b610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f906111aa565b60405180910390fd5b60008060019054906101000a900460ff161590508015610db8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000610dc2610b39565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015610e825760008060016101000a81548160ff0219169083151502179055505b50565b600081359050610e94816114d2565b92915050565b600081519050610ea9816114e9565b92915050565b600081359050610ebe81611500565b92915050565b600081519050610ed381611500565b92915050565b600060208284031215610eeb57600080fd5b6000610ef984828501610e85565b91505092915050565b600080600060608486031215610f1757600080fd5b6000610f2586828701610e85565b9350506020610f3686828701610e85565b9250506040610f4786828701610e85565b9150509250925092565b60008060408385031215610f6457600080fd5b6000610f7285828601610e85565b9250506020610f8385828601610eaf565b9150509250929050565b600060208284031215610f9f57600080fd5b6000610fad84828501610e9a565b91505092915050565b600060208284031215610fc857600080fd5b6000610fd684828501610ec4565b91505092915050565b610fe881611292565b82525050565b6000610ff982611265565b6110038185611270565b93506110138185602086016112da565b61101c8161130d565b840191505092915050565b6000611034602683611281565b915061103f8261131e565b604082019050919050565b6000611057602e83611281565b91506110628261136d565b604082019050919050565b600061107a602683611281565b9150611085826113bc565b604082019050919050565b600061109d603d83611281565b91506110a88261140b565b604082019050919050565b60006110c0602083611281565b91506110cb8261145a565b602082019050919050565b60006110e3603883611281565b91506110ee82611483565b604082019050919050565b611102816112d0565b82525050565b600060208201905061111d6000830184610fdf565b92915050565b60006060820190506111386000830186610fdf565b6111456020830185610fdf565b81810360408301526111578184610fee565b9050949350505050565b60006040820190506111766000830185610fdf565b61118360208301846110f9565b9392505050565b600060208201905081810360008301526111a381611027565b9050919050565b600060208201905081810360008301526111c38161104a565b9050919050565b600060208201905081810360008301526111e38161106d565b9050919050565b6000602082019050818103600083015261120381611090565b9050919050565b60006020820190508181036000830152611223816110b3565b9050919050565b60006020820190508181036000830152611243816110d6565b9050919050565b600060208201905061125f60008301846110f9565b92915050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061129d826112b0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156112f85780820151818401526020810190506112dd565b83811115611307576000848401525b50505050565b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f612076616c696420746f6b656e2061646472657373206d75737420626520707260008201527f6f76696465640000000000000000000000000000000000000000000000000000602082015250565b7f696620726f6f7420636861696e206d616e61676572206973207365742c20657260008201527f63323020707265646963617465206d757374206e6f7420626520307830000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f6465706f73697420746f20706f6c79676f6e206d75737420626520656e61626c60008201527f656420656e61626c6564206f6e2074686973207661756c740000000000000000602082015250565b6114db81611292565b81146114e657600080fd5b50565b6114f2816112a4565b81146114fd57600080fd5b50565b611509816112d0565b811461151457600080fd5b5056fea26469706673582212206bfd4fe7aa7e1c920b147b536c3c29a1881c974422cc238805d7795e671b752164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 136,
        "contract": "contracts/PolygonCommunityVault.sol:PolygonCommunityVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 139,
        "contract": "contracts/PolygonCommunityVault.sol:PolygonCommunityVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 220,
        "contract": "contracts/PolygonCommunityVault.sol:PolygonCommunityVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/PolygonCommunityVault.sol:PolygonCommunityVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/PolygonCommunityVault.sol:PolygonCommunityVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 309,
        "contract": "contracts/PolygonCommunityVault.sol:PolygonCommunityVault",
        "label": "_token",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20)299"
      },
      {
        "astId": 312,
        "contract": "contracts/PolygonCommunityVault.sol:PolygonCommunityVault",
        "label": "_rootChainManager",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IRootChainManager)522"
      },
      {
        "astId": 314,
        "contract": "contracts/PolygonCommunityVault.sol:PolygonCommunityVault",
        "label": "_erc20Predicate",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)299": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRootChainManager)522": {
        "encoding": "inplace",
        "label": "contract IRootChainManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}