{
  "address": "0xE62A9fE9092DE05A725bbe55d8A5334d85f77443",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRootMessageSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestStateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x08cc8bf9da7423241fae4666db911bdb71642544fcd08ea09b4c6e37d2d4e3e5",
  "receipt": {
    "to": null,
    "from": "0xB011D306D36c396847bA42b1c7AEb8E96C540d9a",
    "contractAddress": "0xE62A9fE9092DE05A725bbe55d8A5334d85f77443",
    "transactionIndex": 0,
    "gasUsed": "939803",
    "logsBloom": "0x
    "blockHash": "0x6021537b1a3df18bba98a9002c8323bccba2254eb0ca4d8d97145c96637c4e16",
    "transactionHash": "0x08cc8bf9da7423241fae4666db911bdb71642544fcd08ea09b4c6e37d2d4e3e5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15851520,
        "transactionHash": "0x08cc8bf9da7423241fae4666db911bdb71642544fcd08ea09b4c6e37d2d4e3e5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b011d306d36c396847ba42b1c7aeb8e96c540d9a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000042c6eabf7a18000000000000000000000000000000000000000000000000006638924e672490000000000000000000000000000000000000000000000000807407cb11a898452c00000000000000000000000000000000000000000000000065f5cb63a7aa7800000000000000000000000000000000000000000000000080744a91fc68125d2c",
        "logIndex": 0,
        "blockHash": "0x6021537b1a3df18bba98a9002c8323bccba2254eb0ca4d8d97145c96637c4e16"
      }
    ],
    "blockNumber": 15851520,
    "cumulativeGasUsed": "939803",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf73231F28B7331BBe3124B907840A94851f9f11"
  ],
  "solcInputHash": "ccb0235959348758108ea42e9b7d834f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRootMessageSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestStateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Alex T\",\"details\":\"This can be used to execute commands forwarded from the DAO on the root chain\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"calls FxBaseChildTunnel(_fxChild)\",\"params\":{\"_fxChild\":\"Address of FxStateChildTunnel from https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer/\"}}},\"title\":\"PolygonDAOChild\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"PolygonDAOChild constructor\"}},\"notice\":\"Child chain side of a Polygon data bridge meant to execute commands on the child chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolygonDAOChild.sol\":\"PolygonDAOChild\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/PolygonDAOChild.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {FxBaseChildTunnel} from \\\"./matic/FxBaseChildTunnel.sol\\\";\\n\\n/// @title PolygonDAOChild\\n/// @author Alex T\\n/// @notice Child chain side of a Polygon data bridge meant to execute commands on the child chain\\n/// @dev This can be used to execute commands forwarded from the DAO on the root chain\\ncontract PolygonDAOChild is FxBaseChildTunnel {\\n    uint256 public latestStateId;\\n    address public latestRootMessageSender;\\n    bytes public latestData;\\n\\n    /// @notice PolygonDAOChild constructor\\n    /// @dev calls FxBaseChildTunnel(_fxChild)\\n    /// @param _fxChild Address of FxStateChildTunnel from https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer/\\n    constructor(address _fxChild) FxBaseChildTunnel(_fxChild) {}\\n\\n    /// @notice Enables contract to receive ETH\\n    receive() external payable {}\\n\\n    /// @notice Called when there is a message from the root chain\\n    /// @dev This executes a DAO command on the child chain\\n    /// @param _stateId StateId\\n    /// @param _sender This should be the root chain end of the tunnel\\n    /// @param _data ABI encoded payload to execute\\n    function _processMessageFromRoot(\\n        uint256 _stateId,\\n        address _sender,\\n        bytes memory _data\\n    ) internal override validateSender(_sender) {\\n        latestStateId = _stateId;\\n        latestRootMessageSender = _sender;\\n        latestData = _data;\\n\\n        (address target, uint256 value, bytes memory payload) = abi.decode(_data, (address, uint256, bytes));\\n\\n        (bool success, bytes memory result) = target.call{value : value}(payload);\\n        if (!success) {\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0x4948f4796f1c60ff0184ff1595bfabf83c9cffb9515e2ba4b98a3233ee66003e\",\"license\":\"MIT\"},\"contracts/matic/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n}\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) public {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) public override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0xcd4c0a8de90280fb81e481b07d9f42916ae892d38e7058817068dc91fed565a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010c9380380620010c9833981810160405281019062000037919062000097565b80806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200011c565b600081519050620000918162000102565b92915050565b600060208284031215620000b057620000af620000fd565b5b6000620000c08482850162000080565b91505092915050565b6000620000d682620000dd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200010d81620000c9565b81146200011957600080fd5b50565b610f9d806200012c6000396000f3fe6080604052600436106100745760003560e01c80637f1e9cb01161004e5780637f1e9cb014610101578063888370941461012c5780639a7c4b7114610155578063e6a8e7451461017e5761007b565b8063142bc2ae14610080578063450d11f0146100ab5780635a319df9146100d65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100956101a9565b6040516100a29190610b3b565b60405180910390f35b3480156100b757600080fd5b506100c0610237565b6040516100cd9190610b20565b60405180910390f35b3480156100e257600080fd5b506100eb61025b565b6040516100f89190610bdf565b60405180910390f35b34801561010d57600080fd5b50610116610261565b6040516101239190610b20565b60405180910390f35b34801561013857600080fd5b50610153600480360381019061014e9190610886565b610287565b005b34801561016157600080fd5b5061017c6004803603810190610177919061096b565b61035c565b005b34801561018a57600080fd5b5061019361043f565b6040516101a09190610b20565b60405180910390f35b600480546101b690610d45565b80601f01602080910402602001604051908101604052809291908181526020018280546101e290610d45565b801561022f5780601f106102045761010080835404028352916020019161022f565b820191906000526020600020905b81548152906001019060200180831161021257829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f90610bbf565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e190610b7f565b60405180910390fd5b610439848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610465565b50505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ed90610b9f565b60405180910390fd5b8360028190555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160049080519060200190610554929190610659565b5060008060008480602001905181019061056e91906108b3565b9250925092506000808473ffffffffffffffffffffffffffffffffffffffff16848460405161059d9190610b09565b60006040518083038185875af1925050503d80600081146105da576040519150601f19603f3d011682016040523d82523d6000602084013e6105df565b606091505b50915091508161064e576044815110156105f857600080fd5b600481019050808060200190518101906106129190610922565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106459190610b5d565b60405180910390fd5b505050505050505050565b82805461066590610d45565b90600052602060002090601f01602090048101928261068757600085556106ce565b82601f106106a057805160ff19168380011785556106ce565b828001600101855582156106ce579182015b828111156106cd5782518255916020019190600101906106b2565b5b5090506106db91906106df565b5090565b5b808211156106f85760008160009055506001016106e0565b5090565b600061070f61070a84610c1f565b610bfa565b90508281526020810184848401111561072b5761072a610e15565b5b610736848285610d12565b509392505050565b600061075161074c84610c50565b610bfa565b90508281526020810184848401111561076d5761076c610e15565b5b610778848285610d12565b509392505050565b60008135905061078f81610f22565b92915050565b6000815190506107a481610f39565b92915050565b60008083601f8401126107c0576107bf610e0b565b5b8235905067ffffffffffffffff8111156107dd576107dc610e06565b5b6020830191508360018202830111156107f9576107f8610e10565b5b9250929050565b600082601f83011261081557610814610e0b565b5b81516108258482602086016106fc565b91505092915050565b600082601f83011261084357610842610e0b565b5b815161085384826020860161073e565b91505092915050565b60008135905061086b81610f50565b92915050565b60008151905061088081610f50565b92915050565b60006020828403121561089c5761089b610e1f565b5b60006108aa84828501610780565b91505092915050565b6000806000606084860312156108cc576108cb610e1f565b5b60006108da86828701610795565b93505060206108eb86828701610871565b925050604084015167ffffffffffffffff81111561090c5761090b610e1a565b5b61091886828701610800565b9150509250925092565b60006020828403121561093857610937610e1f565b5b600082015167ffffffffffffffff81111561095657610955610e1a565b5b6109628482850161082e565b91505092915050565b6000806000806060858703121561098557610984610e1f565b5b60006109938782880161085c565b94505060206109a487828801610780565b935050604085013567ffffffffffffffff8111156109c5576109c4610e1a565b5b6109d1878288016107aa565b925092505092959194509250565b6109e881610cc4565b82525050565b60006109f982610c81565b610a038185610c97565b9350610a13818560208601610d12565b610a1c81610e24565b840191505092915050565b6000610a3282610c81565b610a3c8185610ca8565b9350610a4c818560208601610d12565b80840191505092915050565b6000610a6382610c8c565b610a6d8185610cb3565b9350610a7d818560208601610d12565b610a8681610e24565b840191505092915050565b6000610a9e602183610cb3565b9150610aa982610e35565b604082019050919050565b6000610ac1602b83610cb3565b9150610acc82610e84565b604082019050919050565b6000610ae4602a83610cb3565b9150610aef82610ed3565b604082019050919050565b610b0381610d08565b82525050565b6000610b158284610a27565b915081905092915050565b6000602082019050610b3560008301846109df565b92915050565b60006020820190508181036000830152610b5581846109ee565b905092915050565b60006020820190508181036000830152610b778184610a58565b905092915050565b60006020820190508181036000830152610b9881610a91565b9050919050565b60006020820190508181036000830152610bb881610ab4565b9050919050565b60006020820190508181036000830152610bd881610ad7565b9050919050565b6000602082019050610bf46000830184610afa565b92915050565b6000610c04610c15565b9050610c108282610d77565b919050565b6000604051905090565b600067ffffffffffffffff821115610c3a57610c39610dd7565b5b610c4382610e24565b9050602081019050919050565b600067ffffffffffffffff821115610c6b57610c6a610dd7565b5b610c7482610e24565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610ccf82610ce8565b9050919050565b6000610ce182610ce8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610d30578082015181840152602081019050610d15565b83811115610d3f576000848401525b50505050565b60006002820490506001821680610d5d57607f821691505b60208210811415610d7157610d70610da8565b5b50919050565b610d8082610e24565b810181811067ffffffffffffffff82111715610d9f57610d9e610dd7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f5200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b610f2b81610cc4565b8114610f3657600080fd5b50565b610f4281610cd6565b8114610f4d57600080fd5b50565b610f5981610d08565b8114610f6457600080fd5b5056fea26469706673582212206906898a471a4b835552b11293b48cdab8c68b3533d2e08aecd66449b79a904864736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80637f1e9cb01161004e5780637f1e9cb014610101578063888370941461012c5780639a7c4b7114610155578063e6a8e7451461017e5761007b565b8063142bc2ae14610080578063450d11f0146100ab5780635a319df9146100d65761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100956101a9565b6040516100a29190610b3b565b60405180910390f35b3480156100b757600080fd5b506100c0610237565b6040516100cd9190610b20565b60405180910390f35b3480156100e257600080fd5b506100eb61025b565b6040516100f89190610bdf565b60405180910390f35b34801561010d57600080fd5b50610116610261565b6040516101239190610b20565b60405180910390f35b34801561013857600080fd5b50610153600480360381019061014e9190610886565b610287565b005b34801561016157600080fd5b5061017c6004803603810190610177919061096b565b61035c565b005b34801561018a57600080fd5b5061019361043f565b6040516101a09190610b20565b60405180910390f35b600480546101b690610d45565b80601f01602080910402602001604051908101604052809291908181526020018280546101e290610d45565b801561022f5780601f106102045761010080835404028352916020019161022f565b820191906000526020600020905b81548152906001019060200180831161021257829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f90610bbf565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e190610b7f565b60405180910390fd5b610439848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610465565b50505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ed90610b9f565b60405180910390fd5b8360028190555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160049080519060200190610554929190610659565b5060008060008480602001905181019061056e91906108b3565b9250925092506000808473ffffffffffffffffffffffffffffffffffffffff16848460405161059d9190610b09565b60006040518083038185875af1925050503d80600081146105da576040519150601f19603f3d011682016040523d82523d6000602084013e6105df565b606091505b50915091508161064e576044815110156105f857600080fd5b600481019050808060200190518101906106129190610922565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106459190610b5d565b60405180910390fd5b505050505050505050565b82805461066590610d45565b90600052602060002090601f01602090048101928261068757600085556106ce565b82601f106106a057805160ff19168380011785556106ce565b828001600101855582156106ce579182015b828111156106cd5782518255916020019190600101906106b2565b5b5090506106db91906106df565b5090565b5b808211156106f85760008160009055506001016106e0565b5090565b600061070f61070a84610c1f565b610bfa565b90508281526020810184848401111561072b5761072a610e15565b5b610736848285610d12565b509392505050565b600061075161074c84610c50565b610bfa565b90508281526020810184848401111561076d5761076c610e15565b5b610778848285610d12565b509392505050565b60008135905061078f81610f22565b92915050565b6000815190506107a481610f39565b92915050565b60008083601f8401126107c0576107bf610e0b565b5b8235905067ffffffffffffffff8111156107dd576107dc610e06565b5b6020830191508360018202830111156107f9576107f8610e10565b5b9250929050565b600082601f83011261081557610814610e0b565b5b81516108258482602086016106fc565b91505092915050565b600082601f83011261084357610842610e0b565b5b815161085384826020860161073e565b91505092915050565b60008135905061086b81610f50565b92915050565b60008151905061088081610f50565b92915050565b60006020828403121561089c5761089b610e1f565b5b60006108aa84828501610780565b91505092915050565b6000806000606084860312156108cc576108cb610e1f565b5b60006108da86828701610795565b93505060206108eb86828701610871565b925050604084015167ffffffffffffffff81111561090c5761090b610e1a565b5b61091886828701610800565b9150509250925092565b60006020828403121561093857610937610e1f565b5b600082015167ffffffffffffffff81111561095657610955610e1a565b5b6109628482850161082e565b91505092915050565b6000806000806060858703121561098557610984610e1f565b5b60006109938782880161085c565b94505060206109a487828801610780565b935050604085013567ffffffffffffffff8111156109c5576109c4610e1a565b5b6109d1878288016107aa565b925092505092959194509250565b6109e881610cc4565b82525050565b60006109f982610c81565b610a038185610c97565b9350610a13818560208601610d12565b610a1c81610e24565b840191505092915050565b6000610a3282610c81565b610a3c8185610ca8565b9350610a4c818560208601610d12565b80840191505092915050565b6000610a6382610c8c565b610a6d8185610cb3565b9350610a7d818560208601610d12565b610a8681610e24565b840191505092915050565b6000610a9e602183610cb3565b9150610aa982610e35565b604082019050919050565b6000610ac1602b83610cb3565b9150610acc82610e84565b604082019050919050565b6000610ae4602a83610cb3565b9150610aef82610ed3565b604082019050919050565b610b0381610d08565b82525050565b6000610b158284610a27565b915081905092915050565b6000602082019050610b3560008301846109df565b92915050565b60006020820190508181036000830152610b5581846109ee565b905092915050565b60006020820190508181036000830152610b778184610a58565b905092915050565b60006020820190508181036000830152610b9881610a91565b9050919050565b60006020820190508181036000830152610bb881610ab4565b9050919050565b60006020820190508181036000830152610bd881610ad7565b9050919050565b6000602082019050610bf46000830184610afa565b92915050565b6000610c04610c15565b9050610c108282610d77565b919050565b6000604051905090565b600067ffffffffffffffff821115610c3a57610c39610dd7565b5b610c4382610e24565b9050602081019050919050565b600067ffffffffffffffff821115610c6b57610c6a610dd7565b5b610c7482610e24565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610ccf82610ce8565b9050919050565b6000610ce182610ce8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610d30578082015181840152602081019050610d15565b83811115610d3f576000848401525b50505050565b60006002820490506001821680610d5d57607f821691505b60208210811415610d7157610d70610da8565b5b50919050565b610d8082610e24565b810181811067ffffffffffffffff82111715610d9f57610d9e610dd7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f5200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b610f2b81610cc4565b8114610f3657600080fd5b50565b610f4281610cd6565b8114610f4d57600080fd5b50565b610f5981610d08565b8114610f6457600080fd5b5056fea26469706673582212206906898a471a4b835552b11293b48cdab8c68b3533d2e08aecd66449b79a904864736f6c63430008060033",
  "devdoc": {
    "author": "Alex T",
    "details": "This can be used to execute commands forwarded from the DAO on the root chain",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "calls FxBaseChildTunnel(_fxChild)",
        "params": {
          "_fxChild": "Address of FxStateChildTunnel from https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer/"
        }
      }
    },
    "title": "PolygonDAOChild",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "PolygonDAOChild constructor"
      }
    },
    "notice": "Child chain side of a Polygon data bridge meant to execute commands on the child chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2343,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2345,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1703,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "latestStateId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1705,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "latestRootMessageSender",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1707,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "latestData",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}