{
  "address": "0x16BFb943c3D7B38f2eeE27CEb2d10cabCeC4890D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRootMessageSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestStateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8142679e66461a09432c7cff9cc59721e790372af535a0ddd7ca61c77a8554a5",
  "receipt": {
    "to": null,
    "from": "0xB011D306D36c396847bA42b1c7AEb8E96C540d9a",
    "contractAddress": "0x16BFb943c3D7B38f2eeE27CEb2d10cabCeC4890D",
    "transactionIndex": 0,
    "gasUsed": "1283798",
    "logsBloom": "0x00000000000000000000000004000000000000000000000000800000000000000000100000000000000000000000000000018020000000000000000000000000000000000000000000000000000000800001000000000000000100000000000000000000020000000200000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000024010000000000400000001000000000000000000000000000000100000000020000080000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xa2dadec1ca3d53e43e5395cfe1892997a355d105a2e1188d05b560a72d823c20",
    "transactionHash": "0x8142679e66461a09432c7cff9cc59721e790372af535a0ddd7ca61c77a8554a5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15844196,
        "transactionHash": "0x8142679e66461a09432c7cff9cc59721e790372af535a0ddd7ca61c77a8554a5",
        "address": "0x16BFb943c3D7B38f2eeE27CEb2d10cabCeC4890D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b011d306d36c396847ba42b1c7aeb8e96c540d9a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa2dadec1ca3d53e43e5395cfe1892997a355d105a2e1188d05b560a72d823c20"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 15844196,
        "transactionHash": "0x8142679e66461a09432c7cff9cc59721e790372af535a0ddd7ca61c77a8554a5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b011d306d36c396847ba42b1c7aeb8e96c540d9a",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000088d4397099c8000000000000000000000000000000000000000000000000006a70403aa31074000000000000000000000000000000000000000000000000000016955aa2e2c40000000000000000000000000000000000000000000000000069e76c013276ac00000000000000000000000000000000000000000000000000009f6994137c8c00",
        "logIndex": 1,
        "blockHash": "0xa2dadec1ca3d53e43e5395cfe1892997a355d105a2e1188d05b560a72d823c20"
      }
    ],
    "blockNumber": 15844196,
    "cumulativeGasUsed": "1283798",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf73231F28B7331BBe3124B907840A94851f9f11"
  ],
  "solcInputHash": "2452a0f3739a69389a05dba64b22c38f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRootMessageSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestStateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessageToRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Alex T\",\"details\":\"This can be used to execute commands forwarded from the DAO on the root chain\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"calls FxBaseChildTunnel(_fxChild)\",\"params\":{\"_fxChild\":\"Address of FxStateChildTunnel from https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer/\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendMessageToRoot(bytes)\":{\"details\":\"Not currently used\",\"params\":{\"message\":\"payload to send to root chain\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PolygonDAOChild\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"PolygonDAOChild constructor\"},\"sendMessageToRoot(bytes)\":{\"notice\":\"Used to send a message to the root chain\"}},\"notice\":\"Child chain side of a Polygon data bridge meant to execute commands on the child chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolygonDAOChild.sol\":\"PolygonDAOChild\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/PolygonDAOChild.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {FxBaseChildTunnel} from \\\"./matic/FxBaseChildTunnel.sol\\\";\\n\\n/// @title PolygonDAOChild\\n/// @author Alex T\\n/// @notice Child chain side of a Polygon data bridge meant to execute commands on the child chain\\n/// @dev This can be used to execute commands forwarded from the DAO on the root chain\\ncontract PolygonDAOChild is FxBaseChildTunnel, Ownable {\\n    uint256 public latestStateId;\\n    address public latestRootMessageSender;\\n    bytes public latestData;\\n\\n    /// @notice PolygonDAOChild constructor\\n    /// @dev calls FxBaseChildTunnel(_fxChild)\\n    /// @param _fxChild Address of FxStateChildTunnel from https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer/\\n    constructor(address _fxChild) FxBaseChildTunnel(_fxChild) {}\\n\\n    /// @notice Enables contract to receive ETH\\n    receive() external payable {}\\n\\n    /// @notice Called when there is a message from the root chain\\n    /// @dev This executes a DAO command on the child chain\\n    /// @param _stateId StateId\\n    /// @param _sender This should be the root chain end of the tunnel\\n    /// @param _data ABI encoded payload to execute\\n    function _processMessageFromRoot(\\n        uint256 _stateId,\\n        address _sender,\\n        bytes memory _data\\n    ) internal override validateSender(_sender) {\\n        latestStateId = _stateId;\\n        latestRootMessageSender = _sender;\\n        latestData = _data;\\n\\n        (address target, uint256 value, bytes memory payload) = abi.decode(_data, (address, uint256, bytes));\\n\\n        (bool success, bytes memory result) = target.call{value : value}(payload);\\n        if (!success) {\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n    }\\n\\n    /// @notice Used to send a message to the root chain\\n    /// @dev Not currently used\\n    /// @param message payload to send to root chain\\n    function sendMessageToRoot(bytes memory message) public onlyOwner {\\n        _sendMessageToRoot(message);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x196120c15b1575c2b99d2d05529f9b778b4d666bbd55cbda6432ab29663d3d37\",\"license\":\"MIT\"},\"contracts/matic/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n}\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) public {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) public override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0xcd4c0a8de90280fb81e481b07d9f42916ae892d38e7058817068dc91fed565a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200177738038062001777833981810160405281019062000037919062000185565b80806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000996200008d620000a060201b60201c565b620000a860201b60201c565b506200020a565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017f81620001f0565b92915050565b6000602082840312156200019e576200019d620001eb565b5b6000620001ae848285016200016e565b91505092915050565b6000620001c482620001cb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001fb81620001b7565b81146200020757600080fd5b50565b61155d806200021a6000396000f3fe6080604052600436106100a05760003560e01c80638883709411610064578063888370941461016f5780638da5cb5b146101985780639a113ee2146101c35780639a7c4b71146101ec578063e6a8e74514610215578063f2fde38b14610240576100a7565b8063142bc2ae146100ac578063450d11f0146100d75780635a319df914610102578063715018a61461012d5780637f1e9cb014610144576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100c1610269565b6040516100ce9190611034565b60405180910390f35b3480156100e357600080fd5b506100ec6102f7565b6040516100f99190611019565b60405180910390f35b34801561010e57600080fd5b5061011761031b565b6040516101249190611118565b60405180910390f35b34801561013957600080fd5b50610142610321565b005b34801561015057600080fd5b506101596103a9565b6040516101669190611019565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190610cf0565b6103cf565b005b3480156101a457600080fd5b506101ad6104a4565b6040516101ba9190611019565b60405180910390f35b3480156101cf57600080fd5b506101ea60048036038101906101e59190610d8c565b6104ce565b005b3480156101f857600080fd5b50610213600480360381019061020e9190610e1e565b610556565b005b34801561022157600080fd5b5061022a610639565b6040516102379190611019565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190610cf0565b61065f565b005b600580546102769061128d565b80601f01602080910402602001604051908101604052809291908181526020018280546102a29061128d565b80156102ef5780601f106102c4576101008083540402835291602001916102ef565b820191906000526020600020905b8154815290600101906020018083116102d257829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b610329610757565b73ffffffffffffffffffffffffffffffffffffffff166103476104a4565b73ffffffffffffffffffffffffffffffffffffffff161461039d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610394906110d8565b60405180910390fd5b6103a7600061075f565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610460576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610457906110f8565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104d6610757565b73ffffffffffffffffffffffffffffffffffffffff166104f46104a4565b73ffffffffffffffffffffffffffffffffffffffff161461054a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610541906110d8565b60405180910390fd5b61055381610825565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db90611078565b60405180910390fd5b610633848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061085f565b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610667610757565b73ffffffffffffffffffffffffffffffffffffffff166106856104a4565b73ffffffffffffffffffffffffffffffffffffffff16146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d2906110d8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561074b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610742906110b8565b60405180910390fd5b6107548161075f565b50565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036816040516108549190611034565b60405180910390a150565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e790611098565b60405180910390fd5b8360038190555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816005908051906020019061094e929190610a53565b506000806000848060200190518101906109689190610d1d565b9250925092506000808473ffffffffffffffffffffffffffffffffffffffff1684846040516109979190611002565b60006040518083038185875af1925050503d80600081146109d4576040519150601f19603f3d011682016040523d82523d6000602084013e6109d9565b606091505b509150915081610a48576044815110156109f257600080fd5b60048101905080806020019051810190610a0c9190610dd5565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f9190611056565b60405180910390fd5b505050505050505050565b828054610a5f9061128d565b90600052602060002090601f016020900481019282610a815760008555610ac8565b82601f10610a9a57805160ff1916838001178555610ac8565b82800160010185558215610ac8579182015b82811115610ac7578251825591602001919060010190610aac565b5b509050610ad59190610ad9565b5090565b5b80821115610af2576000816000905550600101610ada565b5090565b6000610b09610b0484611158565b611133565b905082815260208101848484011115610b2557610b2461135d565b5b610b3084828561124b565b509392505050565b6000610b4b610b4684611158565b611133565b905082815260208101848484011115610b6757610b6661135d565b5b610b7284828561125a565b509392505050565b6000610b8d610b8884611189565b611133565b905082815260208101848484011115610ba957610ba861135d565b5b610bb484828561125a565b509392505050565b600081359050610bcb816114e2565b92915050565b600081519050610be0816114f9565b92915050565b60008083601f840112610bfc57610bfb611353565b5b8235905067ffffffffffffffff811115610c1957610c1861134e565b5b602083019150836001820283011115610c3557610c34611358565b5b9250929050565b600082601f830112610c5157610c50611353565b5b8135610c61848260208601610af6565b91505092915050565b600082601f830112610c7f57610c7e611353565b5b8151610c8f848260208601610b38565b91505092915050565b600082601f830112610cad57610cac611353565b5b8151610cbd848260208601610b7a565b91505092915050565b600081359050610cd581611510565b92915050565b600081519050610cea81611510565b92915050565b600060208284031215610d0657610d05611367565b5b6000610d1484828501610bbc565b91505092915050565b600080600060608486031215610d3657610d35611367565b5b6000610d4486828701610bd1565b9350506020610d5586828701610cdb565b925050604084015167ffffffffffffffff811115610d7657610d75611362565b5b610d8286828701610c6a565b9150509250925092565b600060208284031215610da257610da1611367565b5b600082013567ffffffffffffffff811115610dc057610dbf611362565b5b610dcc84828501610c3c565b91505092915050565b600060208284031215610deb57610dea611367565b5b600082015167ffffffffffffffff811115610e0957610e08611362565b5b610e1584828501610c98565b91505092915050565b60008060008060608587031215610e3857610e37611367565b5b6000610e4687828801610cc6565b9450506020610e5787828801610bbc565b935050604085013567ffffffffffffffff811115610e7857610e77611362565b5b610e8487828801610be6565b925092505092959194509250565b610e9b816111fd565b82525050565b6000610eac826111ba565b610eb681856111d0565b9350610ec681856020860161125a565b610ecf8161136c565b840191505092915050565b6000610ee5826111ba565b610eef81856111e1565b9350610eff81856020860161125a565b80840191505092915050565b6000610f16826111c5565b610f2081856111ec565b9350610f3081856020860161125a565b610f398161136c565b840191505092915050565b6000610f516021836111ec565b9150610f5c8261137d565b604082019050919050565b6000610f74602b836111ec565b9150610f7f826113cc565b604082019050919050565b6000610f976026836111ec565b9150610fa28261141b565b604082019050919050565b6000610fba6020836111ec565b9150610fc58261146a565b602082019050919050565b6000610fdd602a836111ec565b9150610fe882611493565b604082019050919050565b610ffc81611241565b82525050565b600061100e8284610eda565b915081905092915050565b600060208201905061102e6000830184610e92565b92915050565b6000602082019050818103600083015261104e8184610ea1565b905092915050565b600060208201905081810360008301526110708184610f0b565b905092915050565b6000602082019050818103600083015261109181610f44565b9050919050565b600060208201905081810360008301526110b181610f67565b9050919050565b600060208201905081810360008301526110d181610f8a565b9050919050565b600060208201905081810360008301526110f181610fad565b9050919050565b6000602082019050818103600083015261111181610fd0565b9050919050565b600060208201905061112d6000830184610ff3565b92915050565b600061113d61114e565b905061114982826112bf565b919050565b6000604051905090565b600067ffffffffffffffff8211156111735761117261131f565b5b61117c8261136c565b9050602081019050919050565b600067ffffffffffffffff8211156111a4576111a361131f565b5b6111ad8261136c565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061120882611221565b9050919050565b600061121a82611221565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561127857808201518184015260208101905061125d565b83811115611287576000848401525b50505050565b600060028204905060018216806112a557607f821691505b602082108114156112b9576112b86112f0565b5b50919050565b6112c88261136c565b810181811067ffffffffffffffff821117156112e7576112e661131f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f5200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b6114eb816111fd565b81146114f657600080fd5b50565b6115028161120f565b811461150d57600080fd5b50565b61151981611241565b811461152457600080fd5b5056fea2646970667358221220a0478c47792715b744782369f505fc52eaf9c94116c8b269bed79defed905c5b64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c80638883709411610064578063888370941461016f5780638da5cb5b146101985780639a113ee2146101c35780639a7c4b71146101ec578063e6a8e74514610215578063f2fde38b14610240576100a7565b8063142bc2ae146100ac578063450d11f0146100d75780635a319df914610102578063715018a61461012d5780637f1e9cb014610144576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100c1610269565b6040516100ce9190611034565b60405180910390f35b3480156100e357600080fd5b506100ec6102f7565b6040516100f99190611019565b60405180910390f35b34801561010e57600080fd5b5061011761031b565b6040516101249190611118565b60405180910390f35b34801561013957600080fd5b50610142610321565b005b34801561015057600080fd5b506101596103a9565b6040516101669190611019565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190610cf0565b6103cf565b005b3480156101a457600080fd5b506101ad6104a4565b6040516101ba9190611019565b60405180910390f35b3480156101cf57600080fd5b506101ea60048036038101906101e59190610d8c565b6104ce565b005b3480156101f857600080fd5b50610213600480360381019061020e9190610e1e565b610556565b005b34801561022157600080fd5b5061022a610639565b6040516102379190611019565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190610cf0565b61065f565b005b600580546102769061128d565b80601f01602080910402602001604051908101604052809291908181526020018280546102a29061128d565b80156102ef5780601f106102c4576101008083540402835291602001916102ef565b820191906000526020600020905b8154815290600101906020018083116102d257829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b610329610757565b73ffffffffffffffffffffffffffffffffffffffff166103476104a4565b73ffffffffffffffffffffffffffffffffffffffff161461039d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610394906110d8565b60405180910390fd5b6103a7600061075f565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610460576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610457906110f8565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104d6610757565b73ffffffffffffffffffffffffffffffffffffffff166104f46104a4565b73ffffffffffffffffffffffffffffffffffffffff161461054a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610541906110d8565b60405180910390fd5b61055381610825565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db90611078565b60405180910390fd5b610633848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061085f565b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610667610757565b73ffffffffffffffffffffffffffffffffffffffff166106856104a4565b73ffffffffffffffffffffffffffffffffffffffff16146106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d2906110d8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561074b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610742906110b8565b60405180910390fd5b6107548161075f565b50565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036816040516108549190611034565b60405180910390a150565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e790611098565b60405180910390fd5b8360038190555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816005908051906020019061094e929190610a53565b506000806000848060200190518101906109689190610d1d565b9250925092506000808473ffffffffffffffffffffffffffffffffffffffff1684846040516109979190611002565b60006040518083038185875af1925050503d80600081146109d4576040519150601f19603f3d011682016040523d82523d6000602084013e6109d9565b606091505b509150915081610a48576044815110156109f257600080fd5b60048101905080806020019051810190610a0c9190610dd5565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f9190611056565b60405180910390fd5b505050505050505050565b828054610a5f9061128d565b90600052602060002090601f016020900481019282610a815760008555610ac8565b82601f10610a9a57805160ff1916838001178555610ac8565b82800160010185558215610ac8579182015b82811115610ac7578251825591602001919060010190610aac565b5b509050610ad59190610ad9565b5090565b5b80821115610af2576000816000905550600101610ada565b5090565b6000610b09610b0484611158565b611133565b905082815260208101848484011115610b2557610b2461135d565b5b610b3084828561124b565b509392505050565b6000610b4b610b4684611158565b611133565b905082815260208101848484011115610b6757610b6661135d565b5b610b7284828561125a565b509392505050565b6000610b8d610b8884611189565b611133565b905082815260208101848484011115610ba957610ba861135d565b5b610bb484828561125a565b509392505050565b600081359050610bcb816114e2565b92915050565b600081519050610be0816114f9565b92915050565b60008083601f840112610bfc57610bfb611353565b5b8235905067ffffffffffffffff811115610c1957610c1861134e565b5b602083019150836001820283011115610c3557610c34611358565b5b9250929050565b600082601f830112610c5157610c50611353565b5b8135610c61848260208601610af6565b91505092915050565b600082601f830112610c7f57610c7e611353565b5b8151610c8f848260208601610b38565b91505092915050565b600082601f830112610cad57610cac611353565b5b8151610cbd848260208601610b7a565b91505092915050565b600081359050610cd581611510565b92915050565b600081519050610cea81611510565b92915050565b600060208284031215610d0657610d05611367565b5b6000610d1484828501610bbc565b91505092915050565b600080600060608486031215610d3657610d35611367565b5b6000610d4486828701610bd1565b9350506020610d5586828701610cdb565b925050604084015167ffffffffffffffff811115610d7657610d75611362565b5b610d8286828701610c6a565b9150509250925092565b600060208284031215610da257610da1611367565b5b600082013567ffffffffffffffff811115610dc057610dbf611362565b5b610dcc84828501610c3c565b91505092915050565b600060208284031215610deb57610dea611367565b5b600082015167ffffffffffffffff811115610e0957610e08611362565b5b610e1584828501610c98565b91505092915050565b60008060008060608587031215610e3857610e37611367565b5b6000610e4687828801610cc6565b9450506020610e5787828801610bbc565b935050604085013567ffffffffffffffff811115610e7857610e77611362565b5b610e8487828801610be6565b925092505092959194509250565b610e9b816111fd565b82525050565b6000610eac826111ba565b610eb681856111d0565b9350610ec681856020860161125a565b610ecf8161136c565b840191505092915050565b6000610ee5826111ba565b610eef81856111e1565b9350610eff81856020860161125a565b80840191505092915050565b6000610f16826111c5565b610f2081856111ec565b9350610f3081856020860161125a565b610f398161136c565b840191505092915050565b6000610f516021836111ec565b9150610f5c8261137d565b604082019050919050565b6000610f74602b836111ec565b9150610f7f826113cc565b604082019050919050565b6000610f976026836111ec565b9150610fa28261141b565b604082019050919050565b6000610fba6020836111ec565b9150610fc58261146a565b602082019050919050565b6000610fdd602a836111ec565b9150610fe882611493565b604082019050919050565b610ffc81611241565b82525050565b600061100e8284610eda565b915081905092915050565b600060208201905061102e6000830184610e92565b92915050565b6000602082019050818103600083015261104e8184610ea1565b905092915050565b600060208201905081810360008301526110708184610f0b565b905092915050565b6000602082019050818103600083015261109181610f44565b9050919050565b600060208201905081810360008301526110b181610f67565b9050919050565b600060208201905081810360008301526110d181610f8a565b9050919050565b600060208201905081810360008301526110f181610fad565b9050919050565b6000602082019050818103600083015261111181610fd0565b9050919050565b600060208201905061112d6000830184610ff3565b92915050565b600061113d61114e565b905061114982826112bf565b919050565b6000604051905090565b600067ffffffffffffffff8211156111735761117261131f565b5b61117c8261136c565b9050602081019050919050565b600067ffffffffffffffff8211156111a4576111a361131f565b5b6111ad8261136c565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061120882611221565b9050919050565b600061121a82611221565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561127857808201518184015260208101905061125d565b83811115611287576000848401525b50505050565b600060028204905060018216806112a557607f821691505b602082108114156112b9576112b86112f0565b5b50919050565b6112c88261136c565b810181811067ffffffffffffffff821117156112e7576112e661131f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f5200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b6114eb816111fd565b81146114f657600080fd5b50565b6115028161120f565b811461150d57600080fd5b50565b61151981611241565b811461152457600080fd5b5056fea2646970667358221220a0478c47792715b744782369f505fc52eaf9c94116c8b269bed79defed905c5b64736f6c63430008060033",
  "devdoc": {
    "author": "Alex T",
    "details": "This can be used to execute commands forwarded from the DAO on the root chain",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "calls FxBaseChildTunnel(_fxChild)",
        "params": {
          "_fxChild": "Address of FxStateChildTunnel from https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer/"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendMessageToRoot(bytes)": {
        "details": "Not currently used",
        "params": {
          "message": "payload to send to root chain"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PolygonDAOChild",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "PolygonDAOChild constructor"
      },
      "sendMessageToRoot(bytes)": {
        "notice": "Used to send a message to the root chain"
      }
    },
    "notice": "Child chain side of a Polygon data bridge meant to execute commands on the child chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 301,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 303,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 136,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "latestStateId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "latestRootMessageSender",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 140,
        "contract": "contracts/PolygonDAOChild.sol:PolygonDAOChild",
        "label": "latestData",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}