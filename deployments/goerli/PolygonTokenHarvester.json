{
  "address": "0x1e0c8BD3EFb1EaF7b9537226cA058951210a55B7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SetAllowance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferToOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawOnChild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "WithdrawOnRoot",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_syProvider",
          "type": "address"
        }
      ],
      "name": "claimAndWithdrawOnChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawCooldown",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rootChainManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootChainManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawCooldown",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_childToken",
          "type": "address"
        }
      ],
      "name": "withdrawOnChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "withdrawOnRoot",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cec3634bc623f1237146ff357eb1e0351bc612a8c1a26be62dad35ab59ac6d5",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB011D306D36c396847bA42b1c7AEb8E96C540d9a",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1953741",
    "logsBloom": "0x
    "blockHash": "0x35baed6858ca093b9735bfc3383c33893b7d3e646d740b8da19cbbb57b4437dd",
    "transactionHash": "0x3cec3634bc623f1237146ff357eb1e0351bc612a8c1a26be62dad35ab59ac6d5",
    "logs": [],
    "blockNumber": 4967004,
    "cumulativeGasUsed": "1953741",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "22dbbb7a6af30b6c9f0026c452c1d09a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawOnChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"WithdrawOnRoot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_syProvider\",\"type\":\"address\"}],\"name\":\"claimAndWithdrawOnChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawCooldown\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rootChainManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChainManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawCooldown\",\"type\":\"uint256\"}],\"name\":\"setWithdrawCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childToken\",\"type\":\"address\"}],\"name\":\"withdrawOnChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"withdrawOnRoot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolygonTokenHarvester.sol\":\"PolygonTokenHarvester\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/ISmartYieldProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\ninterface ISmartYieldProvider {\\n    function uToken() external returns (address);\\n    function transferFees() external;\\n}\\n\",\"keccak256\":\"0x7263c27115fe2a5cf1d67569ad51d1885bd7a2b4f6b203f779508ed939246726\",\"license\":\"Apache-2.0\"},\"contracts/PolygonTokenHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./ISmartYieldProvider.sol\\\";\\nimport \\\"./matic/IRootChainManager.sol\\\";\\nimport \\\"./matic/IERC20ChildToken.sol\\\";\\n\\ncontract PolygonTokenHarvester is OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    bool private _onRootChain;\\n\\n    address public rootChainManager;\\n    mapping(address => uint) public lastWithdraw;\\n    uint public withdrawCooldown;\\n\\n    event SetAllowance(address indexed caller, address indexed spender, uint256 amount);\\n    event TransferToOwner(address indexed caller, address indexed owner, address indexed token, uint256 amount);\\n    event WithdrawOnRoot(address indexed caller);\\n    event WithdrawOnChild(address indexed caller, address indexed token, uint256 amount);\\n\\n    function initialize(uint _withdrawCooldown, address _rootChainManager) initializer public {\\n        __Ownable_init();\\n\\n        setWithdrawCooldown(_withdrawCooldown);\\n\\n        if (_rootChainManager != address(0)) {\\n            _onRootChain = true;\\n            rootChainManager = _rootChainManager;\\n        } else {\\n            _onRootChain = false;\\n        }\\n    }\\n\\n    modifier onlyOnRoot {\\n        require(\\n            _onRootChain == true,\\n            \\\"Harvester: should only be called on root chain\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOnChild {\\n        require(\\n            _onRootChain == false,\\n            \\\"Harvester: should only be called on child chain\\\"\\n        );\\n        _;\\n    }\\n\\n    function setWithdrawCooldown(uint _withdrawCooldown) public onlyOwner onlyOnChild {\\n        withdrawCooldown = _withdrawCooldown;\\n    }\\n\\n    // Root Chain Related Functions\\n    function withdrawOnRoot(bytes memory _data) public onlyOnRoot returns (bytes memory) {\\n        //        (bool success, bytes memory returnData) = IRootChainManager(rootChainManager).exit(_data);\\n        (bool success, bytes memory returnData) = rootChainManager.call(_data);\\n        require(success, string(returnData));\\n\\n        emit WithdrawOnRoot(_msgSender());\\n\\n        return returnData;\\n    }\\n\\n    function transferToOwner(address _token) public onlyOnRoot {\\n        require(_token != address(0), \\\"Harvester: token address must be specified\\\");\\n\\n        IERC20 erc20 = IERC20(_token);\\n\\n        address owner = owner();\\n\\n        uint256 amount = erc20.balanceOf(address(this));\\n        erc20.safeTransfer(owner, amount);\\n\\n        emit TransferToOwner(_msgSender(), owner, _token, amount);\\n    }\\n\\n    // Child Chain Related Functions\\n    function withdrawOnChild(address _childToken) public onlyOnChild {\\n        require(_childToken != address(0), \\\"Harvester: child token address must be specified\\\");\\n\\n        // if cooldown has not passed, we just skip it\\n        if (block.number < lastWithdraw[_childToken] + withdrawCooldown) {\\n            return;\\n        }\\n        lastWithdraw[_childToken] = block.number;\\n\\n        IERC20ChildToken erc20 = IERC20ChildToken(_childToken);\\n\\n        uint256 amount = erc20.balanceOf(address(this));\\n        erc20.withdraw(amount);\\n\\n        emit WithdrawOnChild(_msgSender(), _childToken, amount);\\n    }\\n\\n    function claimAndWithdrawOnChild(address _syProvider) public onlyOnChild {\\n        require(_syProvider != address(0), \\\"Harvester: sy provider address must not be 0x0\\\");\\n\\n        ISmartYieldProvider provider = ISmartYieldProvider(_syProvider);\\n        address underlying = provider.uToken();\\n\\n        provider.transferFees();\\n        withdrawOnChild(underlying);\\n    }\\n}\\n\",\"keccak256\":\"0xd8fa116cd1dfc5483e5e8e6c0a786d05c1575ca52786b6345f04d415f2e22c86\",\"license\":\"Apache-2.0\"},\"contracts/matic/IERC20ChildToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20ChildToken is IERC20 {\\n    function deposit(address user, bytes calldata depositData) external;\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x73a5de2455158e2419890af20e2c971dd3e9154f0754eb23cae19c4423180bc9\",\"license\":\"MIT\"},\"contracts/matic/IRootChainManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRootChainManager {\\n    function depositEtherFor(address user) external payable;\\n\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external;\\n\\n    function exit(bytes calldata inputData) external;\\n}\\n\",\"keccak256\":\"0x4d5bd5093599321938bc1d23f401687db9aead051d393be24dc69ab68e6fb495\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612280806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063812d504d11610071578063812d504d1461017957806385d3f47e146101955780638da5cb5b146101b1578063bd07018d146101cf578063da35a26f146101ed578063f2fde38b14610209576100b4565b8063260b1fd9146100b95780633cbfe3a1146100e957806344feed29146101075780635689c26014610123578063624d7b721461013f578063715018a61461016f575b600080fd5b6100d360048036038101906100ce91906117a8565b610225565b6040516100e09190611b14565b60405180910390f35b6100f16103a6565b6040516100fe9190611cb8565b60405180910390f35b610121600480360381019061011c91906117e9565b6103ac565b005b61013d6004803603810190610138919061172d565b610488565b005b6101596004803603810190610154919061172d565b610645565b6040516101669190611cb8565b60405180910390f35b61017761065d565b005b610193600480360381019061018e919061172d565b61079a565b005b6101af60048036038101906101aa919061172d565b6109b2565b005b6101b9610c84565b6040516101c69190611ad0565b60405180910390f35b6101d7610cae565b6040516101e49190611ad0565b60405180910390f35b6102076004803603810190610202919061183b565b610cd4565b005b610223600480360381019061021e919061172d565b610e71565b005b606060011515606560009054906101000a900460ff1615151461027d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027490611c18565b60405180910390fd5b600080606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846040516102c79190611ab9565b6000604051808303816000865af19150503d8060008114610304576040519150601f19603f3d011682016040523d82523d6000602084013e610309565b606091505b5091509150818190610351576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103489190611b36565b60405180910390fd5b5061035a61101d565b73ffffffffffffffffffffffffffffffffffffffff167fc3ff84400b51b8faa19b096a526771e00f25836296ed44a71bc9d01fd59e4ae360405160405180910390a28092505050919050565b60675481565b6103b461101d565b73ffffffffffffffffffffffffffffffffffffffff166103d2610c84565b73ffffffffffffffffffffffffffffffffffffffff1614610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041f90611c58565b60405180910390fd5b60001515606560009054906101000a900460ff1615151461047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590611bb8565b60405180910390fd5b8060678190555050565b60001515606560009054906101000a900460ff161515146104de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d590611bb8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054590611b98565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff1663633156376040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561059d57600080fd5b505af11580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190611756565b90508173ffffffffffffffffffffffffffffffffffffffff1663c2fbe7bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b50505050610640816109b2565b505050565b60666020528060005260406000206000915090505481565b61066561101d565b73ffffffffffffffffffffffffffffffffffffffff16610683610c84565b73ffffffffffffffffffffffffffffffffffffffff16146106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d090611c58565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60011515606560009054906101000a900460ff161515146107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e790611c18565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085790611bf8565b60405180910390fd5b6000819050600061086f610c84565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108ac9190611ad0565b60206040518083038186803b1580156108c457600080fd5b505afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc9190611812565b905061092982828573ffffffffffffffffffffffffffffffffffffffff166110259092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1661095f61101d565b73ffffffffffffffffffffffffffffffffffffffff167f76a904d36c6485f9a5b321da55bfecf63789bc50598252e91560e3b6175c1c06846040516109a49190611cb8565b60405180910390a450505050565b60001515606560009054906101000a900460ff16151514610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ff90611bb8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6f90611b58565b60405180910390fd5b606754606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ac59190611d6c565b431015610ad157610c81565b43606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b559190611ad0565b60206040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190611812565b90508173ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610be09190611cb8565b600060405180830381600087803b158015610bfa57600080fd5b505af1158015610c0e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16610c3161101d565b73ffffffffffffffffffffffffffffffffffffffff167f03d1c6e11435f9fdf99686494801bee42b031ab3c47c63abdbca7e22c33f5cbd83604051610c769190611cb8565b60405180910390a350505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff1680610cfa575060008054906101000a900460ff16155b610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3090611c38565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d89576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d916110ab565b610d9a836103ac565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610e2f576001606560006101000a81548160ff02191690831515021790555081606560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e4b565b6000606560006101000a81548160ff0219169083151502179055505b8015610e6c5760008060016101000a81548160ff0219169083151502179055505b505050565b610e7961101d565b73ffffffffffffffffffffffffffffffffffffffff16610e97610c84565b73ffffffffffffffffffffffffffffffffffffffff1614610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee490611c58565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5490611b78565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6110a68363a9059cbb60e01b8484604051602401611044929190611aeb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611194565b505050565b600060019054906101000a900460ff16806110d1575060008054906101000a900460ff16155b611110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110790611c38565b60405180910390fd5b60008060019054906101000a900460ff161590508015611160576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61116861125b565b611170611334565b80156111915760008060016101000a81548160ff0219169083151502179055505b50565b60006111f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114b69092919063ffffffff16565b90506000815111156112565780806020019051810190611216919061177f565b611255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124c90611c98565b60405180910390fd5b5b505050565b600060019054906101000a900460ff1680611281575060008054906101000a900460ff16155b6112c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b790611c38565b60405180910390fd5b60008060019054906101000a900460ff161590508015611310576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156113315760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061135a575060008054906101000a900460ff16155b611399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139090611c38565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113e9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006113f361101d565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156114b35760008060016101000a81548160ff0219169083151502179055505b50565b60606114c584846000856114ce565b90509392505050565b606082471015611513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150a90611bd8565b60405180910390fd5b61151c856115e2565b61155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155290611c78565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115849190611ab9565b60006040518083038185875af1925050503d80600081146115c1576040519150601f19603f3d011682016040523d82523d6000602084013e6115c6565b606091505b50915091506115d68282866115f5565b92505050949350505050565b600080823b905060008111915050919050565b6060831561160557829050611655565b6000835111156116185782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164c9190611b36565b60405180910390fd5b9392505050565b600061166f61166a84611cf8565b611cd3565b90508281526020810184848401111561168757600080fd5b611692848285611e0a565b509392505050565b6000813590506116a981612205565b92915050565b6000815190506116be81612205565b92915050565b6000815190506116d38161221c565b92915050565b600082601f8301126116ea57600080fd5b81356116fa84826020860161165c565b91505092915050565b60008135905061171281612233565b92915050565b60008151905061172781612233565b92915050565b60006020828403121561173f57600080fd5b600061174d8482850161169a565b91505092915050565b60006020828403121561176857600080fd5b6000611776848285016116af565b91505092915050565b60006020828403121561179157600080fd5b600061179f848285016116c4565b91505092915050565b6000602082840312156117ba57600080fd5b600082013567ffffffffffffffff8111156117d457600080fd5b6117e0848285016116d9565b91505092915050565b6000602082840312156117fb57600080fd5b600061180984828501611703565b91505092915050565b60006020828403121561182457600080fd5b600061183284828501611718565b91505092915050565b6000806040838503121561184e57600080fd5b600061185c85828601611703565b925050602061186d8582860161169a565b9150509250929050565b61188081611dc2565b82525050565b600061189182611d29565b61189b8185611d3f565b93506118ab818560208601611e19565b6118b481611edb565b840191505092915050565b60006118ca82611d29565b6118d48185611d50565b93506118e4818560208601611e19565b80840191505092915050565b60006118fb82611d34565b6119058185611d5b565b9350611915818560208601611e19565b61191e81611edb565b840191505092915050565b6000611936603083611d5b565b915061194182611eec565b604082019050919050565b6000611959602683611d5b565b915061196482611f3b565b604082019050919050565b600061197c602e83611d5b565b915061198782611f8a565b604082019050919050565b600061199f602f83611d5b565b91506119aa82611fd9565b604082019050919050565b60006119c2602683611d5b565b91506119cd82612028565b604082019050919050565b60006119e5602a83611d5b565b91506119f082612077565b604082019050919050565b6000611a08602e83611d5b565b9150611a13826120c6565b604082019050919050565b6000611a2b602e83611d5b565b9150611a3682612115565b604082019050919050565b6000611a4e602083611d5b565b9150611a5982612164565b602082019050919050565b6000611a71601d83611d5b565b9150611a7c8261218d565b602082019050919050565b6000611a94602a83611d5b565b9150611a9f826121b6565b604082019050919050565b611ab381611e00565b82525050565b6000611ac582846118bf565b915081905092915050565b6000602082019050611ae56000830184611877565b92915050565b6000604082019050611b006000830185611877565b611b0d6020830184611aaa565b9392505050565b60006020820190508181036000830152611b2e8184611886565b905092915050565b60006020820190508181036000830152611b5081846118f0565b905092915050565b60006020820190508181036000830152611b7181611929565b9050919050565b60006020820190508181036000830152611b918161194c565b9050919050565b60006020820190508181036000830152611bb18161196f565b9050919050565b60006020820190508181036000830152611bd181611992565b9050919050565b60006020820190508181036000830152611bf1816119b5565b9050919050565b60006020820190508181036000830152611c11816119d8565b9050919050565b60006020820190508181036000830152611c31816119fb565b9050919050565b60006020820190508181036000830152611c5181611a1e565b9050919050565b60006020820190508181036000830152611c7181611a41565b9050919050565b60006020820190508181036000830152611c9181611a64565b9050919050565b60006020820190508181036000830152611cb181611a87565b9050919050565b6000602082019050611ccd6000830184611aaa565b92915050565b6000611cdd611cee565b9050611ce98282611e4c565b919050565b6000604051905090565b600067ffffffffffffffff821115611d1357611d12611eac565b5b611d1c82611edb565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611d7782611e00565b9150611d8283611e00565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611db757611db6611e7d565b5b828201905092915050565b6000611dcd82611de0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611e37578082015181840152602081019050611e1c565b83811115611e46576000848401525b50505050565b611e5582611edb565b810181811067ffffffffffffffff82111715611e7457611e73611eac565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4861727665737465723a206368696c6420746f6b656e2061646472657373206d60008201527f7573742062652073706563696669656400000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4861727665737465723a2073792070726f76696465722061646472657373206d60008201527f757374206e6f7420626520307830000000000000000000000000000000000000602082015250565b7f4861727665737465723a2073686f756c64206f6e6c792062652063616c6c656460008201527f206f6e206368696c6420636861696e0000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4861727665737465723a20746f6b656e2061646472657373206d75737420626560008201527f2073706563696669656400000000000000000000000000000000000000000000602082015250565b7f4861727665737465723a2073686f756c64206f6e6c792062652063616c6c656460008201527f206f6e20726f6f7420636861696e000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b61220e81611dc2565b811461221957600080fd5b50565b61222581611dd4565b811461223057600080fd5b50565b61223c81611e00565b811461224757600080fd5b5056fea264697066735822122042b8bbab5a72783bfb8bec5bbcfeb178e669ecb2157b3587447d4f939f22857564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063812d504d11610071578063812d504d1461017957806385d3f47e146101955780638da5cb5b146101b1578063bd07018d146101cf578063da35a26f146101ed578063f2fde38b14610209576100b4565b8063260b1fd9146100b95780633cbfe3a1146100e957806344feed29146101075780635689c26014610123578063624d7b721461013f578063715018a61461016f575b600080fd5b6100d360048036038101906100ce91906117a8565b610225565b6040516100e09190611b14565b60405180910390f35b6100f16103a6565b6040516100fe9190611cb8565b60405180910390f35b610121600480360381019061011c91906117e9565b6103ac565b005b61013d6004803603810190610138919061172d565b610488565b005b6101596004803603810190610154919061172d565b610645565b6040516101669190611cb8565b60405180910390f35b61017761065d565b005b610193600480360381019061018e919061172d565b61079a565b005b6101af60048036038101906101aa919061172d565b6109b2565b005b6101b9610c84565b6040516101c69190611ad0565b60405180910390f35b6101d7610cae565b6040516101e49190611ad0565b60405180910390f35b6102076004803603810190610202919061183b565b610cd4565b005b610223600480360381019061021e919061172d565b610e71565b005b606060011515606560009054906101000a900460ff1615151461027d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027490611c18565b60405180910390fd5b600080606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846040516102c79190611ab9565b6000604051808303816000865af19150503d8060008114610304576040519150601f19603f3d011682016040523d82523d6000602084013e610309565b606091505b5091509150818190610351576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103489190611b36565b60405180910390fd5b5061035a61101d565b73ffffffffffffffffffffffffffffffffffffffff167fc3ff84400b51b8faa19b096a526771e00f25836296ed44a71bc9d01fd59e4ae360405160405180910390a28092505050919050565b60675481565b6103b461101d565b73ffffffffffffffffffffffffffffffffffffffff166103d2610c84565b73ffffffffffffffffffffffffffffffffffffffff1614610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041f90611c58565b60405180910390fd5b60001515606560009054906101000a900460ff1615151461047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590611bb8565b60405180910390fd5b8060678190555050565b60001515606560009054906101000a900460ff161515146104de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d590611bb8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054590611b98565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff1663633156376040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561059d57600080fd5b505af11580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190611756565b90508173ffffffffffffffffffffffffffffffffffffffff1663c2fbe7bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b50505050610640816109b2565b505050565b60666020528060005260406000206000915090505481565b61066561101d565b73ffffffffffffffffffffffffffffffffffffffff16610683610c84565b73ffffffffffffffffffffffffffffffffffffffff16146106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d090611c58565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60011515606560009054906101000a900460ff161515146107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e790611c18565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085790611bf8565b60405180910390fd5b6000819050600061086f610c84565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108ac9190611ad0565b60206040518083038186803b1580156108c457600080fd5b505afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc9190611812565b905061092982828573ffffffffffffffffffffffffffffffffffffffff166110259092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1661095f61101d565b73ffffffffffffffffffffffffffffffffffffffff167f76a904d36c6485f9a5b321da55bfecf63789bc50598252e91560e3b6175c1c06846040516109a49190611cb8565b60405180910390a450505050565b60001515606560009054906101000a900460ff16151514610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ff90611bb8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6f90611b58565b60405180910390fd5b606754606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ac59190611d6c565b431015610ad157610c81565b43606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600081905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b559190611ad0565b60206040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190611812565b90508173ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610be09190611cb8565b600060405180830381600087803b158015610bfa57600080fd5b505af1158015610c0e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16610c3161101d565b73ffffffffffffffffffffffffffffffffffffffff167f03d1c6e11435f9fdf99686494801bee42b031ab3c47c63abdbca7e22c33f5cbd83604051610c769190611cb8565b60405180910390a350505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019054906101000a900460ff1680610cfa575060008054906101000a900460ff16155b610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3090611c38565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d89576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d916110ab565b610d9a836103ac565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610e2f576001606560006101000a81548160ff02191690831515021790555081606560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e4b565b6000606560006101000a81548160ff0219169083151502179055505b8015610e6c5760008060016101000a81548160ff0219169083151502179055505b505050565b610e7961101d565b73ffffffffffffffffffffffffffffffffffffffff16610e97610c84565b73ffffffffffffffffffffffffffffffffffffffff1614610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee490611c58565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5490611b78565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6110a68363a9059cbb60e01b8484604051602401611044929190611aeb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611194565b505050565b600060019054906101000a900460ff16806110d1575060008054906101000a900460ff16155b611110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110790611c38565b60405180910390fd5b60008060019054906101000a900460ff161590508015611160576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61116861125b565b611170611334565b80156111915760008060016101000a81548160ff0219169083151502179055505b50565b60006111f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114b69092919063ffffffff16565b90506000815111156112565780806020019051810190611216919061177f565b611255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124c90611c98565b60405180910390fd5b5b505050565b600060019054906101000a900460ff1680611281575060008054906101000a900460ff16155b6112c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b790611c38565b60405180910390fd5b60008060019054906101000a900460ff161590508015611310576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156113315760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061135a575060008054906101000a900460ff16155b611399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139090611c38565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113e9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006113f361101d565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156114b35760008060016101000a81548160ff0219169083151502179055505b50565b60606114c584846000856114ce565b90509392505050565b606082471015611513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150a90611bd8565b60405180910390fd5b61151c856115e2565b61155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155290611c78565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115849190611ab9565b60006040518083038185875af1925050503d80600081146115c1576040519150601f19603f3d011682016040523d82523d6000602084013e6115c6565b606091505b50915091506115d68282866115f5565b92505050949350505050565b600080823b905060008111915050919050565b6060831561160557829050611655565b6000835111156116185782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164c9190611b36565b60405180910390fd5b9392505050565b600061166f61166a84611cf8565b611cd3565b90508281526020810184848401111561168757600080fd5b611692848285611e0a565b509392505050565b6000813590506116a981612205565b92915050565b6000815190506116be81612205565b92915050565b6000815190506116d38161221c565b92915050565b600082601f8301126116ea57600080fd5b81356116fa84826020860161165c565b91505092915050565b60008135905061171281612233565b92915050565b60008151905061172781612233565b92915050565b60006020828403121561173f57600080fd5b600061174d8482850161169a565b91505092915050565b60006020828403121561176857600080fd5b6000611776848285016116af565b91505092915050565b60006020828403121561179157600080fd5b600061179f848285016116c4565b91505092915050565b6000602082840312156117ba57600080fd5b600082013567ffffffffffffffff8111156117d457600080fd5b6117e0848285016116d9565b91505092915050565b6000602082840312156117fb57600080fd5b600061180984828501611703565b91505092915050565b60006020828403121561182457600080fd5b600061183284828501611718565b91505092915050565b6000806040838503121561184e57600080fd5b600061185c85828601611703565b925050602061186d8582860161169a565b9150509250929050565b61188081611dc2565b82525050565b600061189182611d29565b61189b8185611d3f565b93506118ab818560208601611e19565b6118b481611edb565b840191505092915050565b60006118ca82611d29565b6118d48185611d50565b93506118e4818560208601611e19565b80840191505092915050565b60006118fb82611d34565b6119058185611d5b565b9350611915818560208601611e19565b61191e81611edb565b840191505092915050565b6000611936603083611d5b565b915061194182611eec565b604082019050919050565b6000611959602683611d5b565b915061196482611f3b565b604082019050919050565b600061197c602e83611d5b565b915061198782611f8a565b604082019050919050565b600061199f602f83611d5b565b91506119aa82611fd9565b604082019050919050565b60006119c2602683611d5b565b91506119cd82612028565b604082019050919050565b60006119e5602a83611d5b565b91506119f082612077565b604082019050919050565b6000611a08602e83611d5b565b9150611a13826120c6565b604082019050919050565b6000611a2b602e83611d5b565b9150611a3682612115565b604082019050919050565b6000611a4e602083611d5b565b9150611a5982612164565b602082019050919050565b6000611a71601d83611d5b565b9150611a7c8261218d565b602082019050919050565b6000611a94602a83611d5b565b9150611a9f826121b6565b604082019050919050565b611ab381611e00565b82525050565b6000611ac582846118bf565b915081905092915050565b6000602082019050611ae56000830184611877565b92915050565b6000604082019050611b006000830185611877565b611b0d6020830184611aaa565b9392505050565b60006020820190508181036000830152611b2e8184611886565b905092915050565b60006020820190508181036000830152611b5081846118f0565b905092915050565b60006020820190508181036000830152611b7181611929565b9050919050565b60006020820190508181036000830152611b918161194c565b9050919050565b60006020820190508181036000830152611bb18161196f565b9050919050565b60006020820190508181036000830152611bd181611992565b9050919050565b60006020820190508181036000830152611bf1816119b5565b9050919050565b60006020820190508181036000830152611c11816119d8565b9050919050565b60006020820190508181036000830152611c31816119fb565b9050919050565b60006020820190508181036000830152611c5181611a1e565b9050919050565b60006020820190508181036000830152611c7181611a41565b9050919050565b60006020820190508181036000830152611c9181611a64565b9050919050565b60006020820190508181036000830152611cb181611a87565b9050919050565b6000602082019050611ccd6000830184611aaa565b92915050565b6000611cdd611cee565b9050611ce98282611e4c565b919050565b6000604051905090565b600067ffffffffffffffff821115611d1357611d12611eac565b5b611d1c82611edb565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611d7782611e00565b9150611d8283611e00565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611db757611db6611e7d565b5b828201905092915050565b6000611dcd82611de0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611e37578082015181840152602081019050611e1c565b83811115611e46576000848401525b50505050565b611e5582611edb565b810181811067ffffffffffffffff82111715611e7457611e73611eac565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4861727665737465723a206368696c6420746f6b656e2061646472657373206d60008201527f7573742062652073706563696669656400000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4861727665737465723a2073792070726f76696465722061646472657373206d60008201527f757374206e6f7420626520307830000000000000000000000000000000000000602082015250565b7f4861727665737465723a2073686f756c64206f6e6c792062652063616c6c656460008201527f206f6e206368696c6420636861696e0000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4861727665737465723a20746f6b656e2061646472657373206d75737420626560008201527f2073706563696669656400000000000000000000000000000000000000000000602082015250565b7f4861727665737465723a2073686f756c64206f6e6c792062652063616c6c656460008201527f206f6e20726f6f7420636861696e000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b61220e81611dc2565b811461221957600080fd5b50565b61222581611dd4565b811461223057600080fd5b50565b61223c81611e00565b811461224757600080fd5b5056fea264697066735822122042b8bbab5a72783bfb8bec5bbcfeb178e669ecb2157b3587447d4f939f22857564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 136,
        "contract": "contracts/PolygonTokenHarvester.sol:PolygonTokenHarvester",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 139,
        "contract": "contracts/PolygonTokenHarvester.sol:PolygonTokenHarvester",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 220,
        "contract": "contracts/PolygonTokenHarvester.sol:PolygonTokenHarvester",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/PolygonTokenHarvester.sol:PolygonTokenHarvester",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/PolygonTokenHarvester.sol:PolygonTokenHarvester",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 847,
        "contract": "contracts/PolygonTokenHarvester.sol:PolygonTokenHarvester",
        "label": "_onRootChain",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 849,
        "contract": "contracts/PolygonTokenHarvester.sol:PolygonTokenHarvester",
        "label": "rootChainManager",
        "offset": 1,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 853,
        "contract": "contracts/PolygonTokenHarvester.sol:PolygonTokenHarvester",
        "label": "lastWithdraw",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 855,
        "contract": "contracts/PolygonTokenHarvester.sol:PolygonTokenHarvester",
        "label": "withdrawCooldown",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}