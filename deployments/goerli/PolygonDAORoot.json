{
  "address": "0x906c56551c2Ec423a46D63DcC9ff7A6a553c2bC0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        }
      ],
      "name": "CallOnChild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "callOnChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x860f63134823652c274eb249f8aa206d483f299c7a4d6848d5d857c7cf9b3ddf",
  "receipt": {
    "to": null,
    "from": "0xB011D306D36c396847bA42b1c7AEb8E96C540d9a",
    "contractAddress": "0x906c56551c2Ec423a46D63DcC9ff7A6a553c2bC0",
    "transactionIndex": 0,
    "gasUsed": "3545123",
    "logsBloom": "0x
    "blockHash": "0x8bd20bc58a70ccd0dce3e66e6a539523e521ac6df107d8229fce08ae9fd332be",
    "transactionHash": "0x860f63134823652c274eb249f8aa206d483f299c7a4d6848d5d857c7cf9b3ddf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5018772,
        "transactionHash": "0x860f63134823652c274eb249f8aa206d483f299c7a4d6848d5d857c7cf9b3ddf",
        "address": "0x906c56551c2Ec423a46D63DcC9ff7A6a553c2bC0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b011d306d36c396847ba42b1c7aeb8e96c540d9a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8bd20bc58a70ccd0dce3e66e6a539523e521ac6df107d8229fce08ae9fd332be"
      }
    ],
    "blockNumber": 5018772,
    "cumulativeGasUsed": "3545123",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"
  ],
  "solcInputHash": "3205a4c6c7c7ab6db36826a9b950d03b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"CallOnChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"callOnChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessageToChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolygonDAORoot.sol\":\"PolygonDAORoot\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/PolygonDAORoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {FxBaseRootTunnel} from \\\"./matic/FxBaseRootTunnel.sol\\\";\\n\\n\\ncontract PolygonDAORoot is FxBaseRootTunnel, Ownable {\\n    bytes public latestData;\\n\\n    event CallOnChild(address indexed caller, address target, bytes4 sig);\\n\\n    constructor(address _checkpointManager, address _fxRoot) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n    }\\n\\n    function _processMessageFromChild(bytes memory data) internal override {\\n        latestData = data;\\n    }\\n\\n    function sendMessageToChild(bytes memory message) public onlyOwner {\\n        _sendMessageToChild(message);\\n    }\\n\\n    function callOnChild(address _target, bytes memory _data) public onlyOwner {\\n        require(_target != address(0), \\\"PolygonDAORoot: a valid target address must be provided\\\");\\n        require(_data.length >= 4, \\\"PolygonDAORoot: a valid payload must be provided\\\");\\n\\n        bytes memory message = abi.encode(_target, _data);\\n        sendMessageToChild(message);\\n\\n        emit CallOnChild(msg.sender, _target, bytes4(_data));\\n    }\\n}\\n\",\"keccak256\":\"0x78599ab2c4bd4f000bee36efc91d971525de8931537a65e44264bf17bf3d0fc5\",\"license\":\"MIT\"},\"contracts/matic/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\n\\nimport {RLPReader} from \\\"./lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"./lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"./lib/Merkle.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages\\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\\n        .toRlpItem()\\n        .toList();\\n\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                inputDataRLPList[2].toUint(), // blockNumber\\n            // first 2 nibbles are dropped while generating nibble array\\n            // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n            // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\\n        .toBytes()\\n        .toRlpItem()\\n        .toList();\\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\\n        .toList()[\\n        inputDataRLPList[9].toUint() // receiptLogIndex\\n        ];\\n\\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == RLPReader.toAddress(logRLPList[0]), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                inputDataRLPList[6].toBytes(), // receipt\\n                inputDataRLPList[8].toBytes(), // branchMask\\n                inputDataRLPList[7].toBytes(), // receiptProof\\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            inputDataRLPList[2].toUint(), // blockNumber\\n            inputDataRLPList[3].toUint(), // blockTime\\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\\n            inputDataRLPList[0].toUint(), // headerNumber\\n            inputDataRLPList[1].toBytes() // blockProof\\n        );\\n\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory receivedData = logRLPList[2].toBytes();\\n        (bytes memory message) = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n        bytes32 headerRoot,\\n        uint256 startBlock,\\n        ,\\n        uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n            .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x68abdc4baa2be1b94d2b88683b4ba4d037cd5acad31b6870e6534b3d14c51494\",\"license\":\"MIT\"},\"contracts/matic/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x3e49c8f6baaa902d44bcc7a3637934373c2f2ebcce53fefc6a0c945de3ccb416\",\"license\":\"MIT\"},\"contracts/matic/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf97bce61ab0a63daeaabfba78e8edb58fbd17e9a6d697b2aa478d2cf8346a604\",\"license\":\"MIT\"},\"contracts/matic/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        require(item.length > 0, \\\"RLPReader: INVALID_BYTES_LENGTH\\\");\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item), \\\"RLPReader: ITEM_NOT_LIST\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: LIST_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_ADDRESS\\\");\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"RLPReader: INVALID_ADDRESS_LENGTH\\\");\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_UINT\\\");\\n        require(item.len <= 33, \\\"RLPReader: INVALID_UINT_LENGTH\\\");\\n\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\\\");\\n        // one byte prefix\\n        require(item.len == 33, \\\"RLPReader: INVALID_UINT_STRICT_LENGTH\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\\\");\\n        uint256 offset = _payloadOffset(item.memPtr);\\n\\n        uint256 len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\\n        // require(isList(item), \\\"RLPReader: NUM_ITEMS_NOT_LIST\\\");\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            require(currPtr <= endPtr, \\\"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\\\");\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x994a86e3cad58ab264cf6fb4faa143ddf450fe9e7d5ec22fbeaae5a89bf58001\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200404e3803806200404e833981810160405281019062000037919062000194565b818181600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506000620000ce6200017560201b60201c565b905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050506200022e565b600033905090565b6000815190506200018e8162000214565b92915050565b60008060408385031215620001ae57620001ad6200020f565b5b6000620001be858286016200017d565b9250506020620001d1858286016200017d565b9150509250929050565b6000620001e882620001ef565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200021f81620001db565b81146200022b57600080fd5b50565b613e10806200023e6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063972c49281161008c578063c67a867511610066578063c67a8675146101dc578063de9b771f146101f8578063f2fde38b14610216578063f953cec714610232576100cf565b8063972c492814610184578063aea4e49e146101a2578063c0857ba0146101be576100cf565b80630e387de6146100d4578063142bc2ae146100f25780634c09e6e814610110578063607f2d421461012c578063715018a61461015c5780638da5cb5b14610166575b600080fd5b6100dc61024e565b6040516100e99190612c8f565b60405180910390f35b6100fa610275565b6040516101079190612caa565b60405180910390f35b61012a60048036038101906101259190612672565b610303565b005b610146600480360381019061014191906125ca565b61038b565b6040516101539190612c74565b60405180910390f35b6101646103ab565b005b61016e6104e8565b60405161017b9190612c00565b60405180910390f35b61018c610512565b6040516101999190612c00565b60405180910390f35b6101bc60048036038101906101b79190612541565b610538565b005b6101c661060d565b6040516101d39190612ccc565b60405180910390f35b6101f660048036038101906101f1919061256e565b610633565b005b6102006107f1565b60405161020d9190612ce7565b60405180910390f35b610230600480360381019061022b9190612541565b610815565b005b61024c60048036038101906102479190612672565b6109c1565b005b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b81565b6005805461028290613522565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90613522565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b61030b6109db565b73ffffffffffffffffffffffffffffffffffffffff166103296104e8565b73ffffffffffffffffffffffffffffffffffffffff161461037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690612e82565b60405180910390fd5b610388816109e3565b50565b60036020528060005260406000206000915054906101000a900460ff1681565b6103b36109db565b73ffffffffffffffffffffffffffffffffffffffff166103d16104e8565b73ffffffffffffffffffffffffffffffffffffffff1614610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e90612e82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c090612d42565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61063b6109db565b73ffffffffffffffffffffffffffffffffffffffff166106596104e8565b73ffffffffffffffffffffffffffffffffffffffff16146106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a690612e82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071690612e62565b60405180910390fd5b600481511015610764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075b90612e22565b60405180910390fd5b60008282604051602001610779929190612c44565b604051602081830303815290604052905061079381610303565b3373ffffffffffffffffffffffffffffffffffffffff167f06039b2b00add27e4381d66dc1498b11ab5105e5a58af184b81783257faf340684846107d690613431565b6040516107e4929190612c1b565b60405180910390a2505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61081d6109db565b73ffffffffffffffffffffffffffffffffffffffff1661083b6104e8565b73ffffffffffffffffffffffffffffffffffffffff1614610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890612e82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f890612d62565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006109cc82610a95565b90506109d781611000565b5050565b600033905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4720477600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610a60929190612c44565b600060405180830381600087803b158015610a7a57600080fd5b505af1158015610a8e573d6000803e3d6000fd5b5050505050565b60606000610aaa610aa58461101a565b61108c565b90506000610ad282600281518110610ac557610ac46136d1565b5b602002602001015161122f565b610afe610af984600881518110610aec57610aeb6136d1565b5b602002602001015161137a565b611478565b610b2284600981518110610b1557610b146136d1565b5b602002602001015161122f565b604051602001610b3493929190612b79565b604051602081830303815290604052805190602001209050600015156003600083815260200190815260200160002060009054906101000a900460ff16151514610bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baa90612da2565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000610c15610c10610c0b85600681518110610bfe57610bfd6136d1565b5b602002602001015161137a565b61101a565b61108c565b90506000610c3d82600381518110610c3057610c2f6136d1565b5b602002602001015161108c565b610c6185600981518110610c5457610c536136d1565b5b602002602001015161122f565b81518110610c7257610c716136d1565b5b602002602001015190506000610c878261108c565b9050610cad81600081518110610ca057610c9f6136d1565b5b602002602001015161168e565b73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3390612f62565b60405180910390fd5b610dd7610d6386600681518110610d5657610d556136d1565b5b602002602001015161137a565b610d8787600881518110610d7a57610d796136d1565b5b602002602001015161137a565b610dab88600781518110610d9e57610d9d6136d1565b5b602002602001015161137a565b610dcf89600581518110610dc257610dc16136d1565b5b602002602001015161122f565b60001b611730565b610e16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0d90612d82565b60405180910390fd5b610efc610e3d86600281518110610e3057610e2f6136d1565b5b602002602001015161122f565b610e6187600381518110610e5457610e536136d1565b5b602002602001015161122f565b610e8588600481518110610e7857610e776136d1565b5b602002602001015161122f565b60001b610eac89600581518110610e9f57610e9e6136d1565b5b602002602001015161122f565b60001b610ed38a600081518110610ec657610ec56136d1565b5b602002602001015161122f565b610ef78b600181518110610eea57610ee96136d1565b5b602002602001015161137a565b611a36565b506000610f2382600181518110610f1657610f156136d1565b5b602002602001015161108c565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610f6d82600081518110610f6057610f5f6136d1565b5b602002602001015161122f565b60001b14610fb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa790612f02565b60405180910390fd5b6000610fd683600281518110610fc957610fc86136d1565b5b602002602001015161137a565b9050600081806020019051810190610fee91906126bb565b90508098505050505050505050919050565b806005908051906020019061101692919061233b565b5050565b6110226123c1565b6000825111611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90612dc2565b60405180910390fd5b600060208301905060405180604001604052808451815260200182815250915050919050565b606061109782611b8c565b6110d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cd90612fa2565b60405180910390fd5b60006110e183611bc5565b905060008167ffffffffffffffff8111156110ff576110fe613700565b5b60405190808252806020026020018201604052801561113857816020015b6111256123c1565b81526020019060019003908161111d5790505b509050600061114a8560200151611c84565b905084600001518114611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990612f42565b60405180910390fd5b60006111a18660200151611d60565b86602001516111b091906130bb565b9050600080600090505b85811015611221576111cb83611c84565b91506040518060400160405280838152602001848152508582815181106111f5576111f46136d1565b5b6020026020010181905250818361120c91906130bb565b9250808061121990613585565b9150506111ba565b508395505050505050919050565b600061123a82611b8c565b1561127a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127190612d22565b60405180910390fd5b6021826000015111156112c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b990612f22565b60405180910390fd5b60006112d18360200151611c84565b905082600001518114611319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131090612fc2565b60405180910390fd5b60006113288460200151611d60565b9050600081856000015161133c919061333e565b905060008083876020015161135191906130bb565b905080519150602083101561136d57826020036101000a820491505b8195505050505050919050565b6060600061138b8360200151611c84565b9050826000015181146113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca90612de2565b60405180910390fd5b60006113e28460200151611d60565b905060008185600001516113f6919061333e565b905060008167ffffffffffffffff81111561141457611413613700565b5b6040519080825280601f01601f1916602001820160405280156114465781602001600182028036833780820191505090505b509050600081602001905061146b84886020015161146491906130bb565b8285611e1f565b8195505050505050919050565b60606000604051806020016040528060008152509050600083511115611685576000806114a6600086611ebc565b60f81c905060018160ff1614806114c0575060038160ff16145b1561158a576001600286516114d591906132e4565b6114df919061333e565b67ffffffffffffffff8111156114f8576114f7613700565b5b6040519080825280601f01601f19166020018201604052801561152a5781602001600182028036833780820191505090505b509250600061153a600187611ebc565b90508084600081518110611551576115506136d1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019250506115f6565b600280865161159991906132e4565b6115a3919061333e565b67ffffffffffffffff8111156115bc576115bb613700565b5b6040519080825280601f01601f1916602001820160405280156115ee5781602001600182028036833780820191505090505b509250600091505b60008260ff1690505b83518110156116815761162c60028460ff168361161c919061333e565b61162691906130bb565b87611ebc565b84828151811061163f5761163e6136d1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061167990613585565b9150506115ff565b5050505b80915050919050565b600061169982611b8c565b156116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d090612e42565b60405180910390fd5b6015826000015114611720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171790612fe2565b60405180910390fd5b6117298261122f565b9050919050565b60008061173c8461101a565b905060006117498261108c565b9050606080600086905060008061175f8b611478565b905060008151141561177b576000975050505050505050611a2e565b60005b8651811015611a255781518311156117a157600098505050505050505050611a2e565b6117c48782815181106117b7576117b66136d1565b5b6020026020010151611f54565b9550858051906020012084146117e557600098505050505050505050611a2e565b6118088782815181106117fb576117fa6136d1565b5b602002602001015161108c565b94506011855114156118fb578151831415611878578c805190602001206118498660108151811061183c5761183b6136d1565b5b602002602001015161137a565b80519060200120141561186757600198505050505050505050611a2e565b600098505050505050505050611a2e565b600082848151811061188d5761188c6136d1565b5b602001015160f81c60f81b60f81c905060108160ff1611156118bb5760009950505050505050505050611a2e565b6118e1868260ff16815181106118d4576118d36136d1565b5b6020026020010151611fd0565b60001b94506001846118f391906130bb565b935050611a12565b600285511415611a0057600061193561192e87600081518110611921576119206136d1565b5b602002602001015161137a565b8486612094565b90508251818561194591906130bb565b14156119a8578d805190602001206119778760018151811061196a576119696136d1565b5b602002602001015161137a565b8051906020012014156119965760019950505050505050505050611a2e565b60009950505050505050505050611a2e565b60008114156119c35760009950505050505050505050611a2e565b80846119cf91906130bb565b93506119f5866001815181106119e8576119e76136d1565b5b6020026020010151611fd0565b60001b945050611a11565b600098505050505050505050611a2e565b5b8080611a1d90613585565b91505061177e565b50505050505050505b949350505050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341539d4a876040518263ffffffff1660e01b8152600401611a979190613002565b60a06040518083038186803b158015611aaf57600080fd5b505afa158015611ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae791906125f7565b5093505092509250611b3d828b611afe919061333e565b84878d8d8d8d604051602001611b179493929190612bb2565b604051602081830303815290604052805190602001206121ca909392919063ffffffff16565b611b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7390612ee2565b60405180910390fd5b8093505050509695505050505050565b600080600083602001519050805160001a915060c060ff168260ff161015611bb957600092505050611bc0565b6001925050505b919050565b600080600090506000611bdb8460200151611d60565b8460200151611bea91906130bb565b9050600084600001518560200151611c0291906130bb565b90505b80821015611c7957611c1682611c84565b82611c2191906130bb565b915080821115611c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5d90612e02565b60405180910390fd5b8280611c7190613585565b935050611c05565b829350505050919050565b6000806000835160001a9050608060ff16811015611ca55760019150611d56565b60b860ff16811015611cd4576001608060ff1682611cc3919061333e565b611ccd91906130bb565b9150611d55565b60c060ff16811015611d045760b78103600185019450806020036101000a85510460018201810193505050611d54565b60f860ff16811015611d3357600160c060ff1682611d22919061333e565b611d2c91906130bb565b9150611d53565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b600080825160001a9050608060ff16811015611d80576000915050611e1a565b60b860ff16811080611da5575060c060ff168110158015611da4575060f860ff1681105b5b15611db4576001915050611e1a565b60c060ff16811015611def5760018060b8611dcf9190613372565b60ff1682611ddd919061333e565b611de791906130bb565b915050611e1a565b60018060f8611dfe9190613372565b60ff1682611e0c919061333e565b611e1691906130bb565b9150505b919050565b6000811415611e2d57611eb7565b5b602060ff168110611e785782518252602060ff1683611e4d91906130bb565b9250602060ff1682611e5f91906130bb565b9150602060ff1681611e71919061333e565b9050611e2e565b6000600182602060ff16611e8c919061333e565b610100611e9991906131c6565b611ea3919061333e565b905080198451168184511681811785525050505b505050565b600080600284611ecc91906135e2565b14611f0f57601082600285611ee19190613111565b81518110611ef257611ef16136d1565b5b602001015160f81c60f81b60f81c611f0a9190613613565b611f49565b601082600285611f1f9190613111565b81518110611f3057611f2f6136d1565b5b602001015160f81c60f81b60f81c611f489190613142565b5b60f81b905092915050565b60606000826000015167ffffffffffffffff811115611f7657611f75613700565b5b6040519080825280601f01601f191660200182016040528015611fa85781602001600182028036833780820191505090505b5090506000816020019050611fc68460200151828660000151611e1f565b8192505050919050565b600080611fe08360200151611c84565b905082600001518114612028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201f90612f82565b60405180910390fd5b602183600001511461206f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206690612d02565b60405180910390fd5b6000806001856020015161208391906130bb565b905080519150819350505050919050565b6000806000905060006120a686611478565b90506000815167ffffffffffffffff8111156120c5576120c4613700565b5b6040519080825280601f01601f1916602001820160405280156120f75781602001600182028036833780820191505090505b50905060008590505b82518661210d91906130bb565b811015612198576000878281518110612129576121286136d1565b5b602001015160f81c60f81b905080838884612144919061333e565b81518110612155576121546136d1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050808061219090613585565b915050612100565b508080519060200120828051906020012014156121b857815192506121bd565b600092505b8293505050509392505050565b600080602083516121db91906135e2565b1461221b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221290612ea2565b60405180910390fd5b60006020835161222b9190613111565b905080600261223a91906131c6565b851061227b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227290612ec2565b60405180910390fd5b6000808790506000602090505b8551811161232a5780860151925060006002896122a591906135e2565b14156122db5781836040516020016122be929190612b4d565b604051602081830303815290604052805190602001209150612307565b82826040516020016122ee929190612b4d565b6040516020818303038152906040528051906020012091505b6002886123149190613111565b975060208161232391906130bb565b9050612288565b508581149350505050949350505050565b82805461234790613522565b90600052602060002090601f01602090048101928261236957600085556123b0565b82601f1061238257805160ff19168380011785556123b0565b828001600101855582156123b0579182015b828111156123af578251825591602001919060010190612394565b5b5090506123bd91906123db565b5090565b604051806040016040528060008152602001600081525090565b5b808211156123f45760008160009055506001016123dc565b5090565b600061240b61240684613042565b61301d565b90508281526020810184848401111561242757612426613749565b5b6124328482856134e0565b509392505050565b600061244d61244884613042565b61301d565b90508281526020810184848401111561246957612468613749565b5b6124748482856134ef565b509392505050565b60008135905061248b81613d95565b92915050565b6000815190506124a081613d95565b92915050565b6000813590506124b581613dac565b92915050565b6000815190506124ca81613dac565b92915050565b600082601f8301126124e5576124e4613744565b5b81356124f58482602086016123f8565b91505092915050565b600082601f83011261251357612512613744565b5b815161252384826020860161243a565b91505092915050565b60008151905061253b81613dc3565b92915050565b60006020828403121561255757612556613753565b5b60006125658482850161247c565b91505092915050565b6000806040838503121561258557612584613753565b5b60006125938582860161247c565b925050602083013567ffffffffffffffff8111156125b4576125b361374e565b5b6125c0858286016124d0565b9150509250929050565b6000602082840312156125e0576125df613753565b5b60006125ee848285016124a6565b91505092915050565b600080600080600060a0868803121561261357612612613753565b5b6000612621888289016124bb565b95505060206126328882890161252c565b94505060406126438882890161252c565b93505060606126548882890161252c565b925050608061266588828901612491565b9150509295509295909350565b60006020828403121561268857612687613753565b5b600082013567ffffffffffffffff8111156126a6576126a561374e565b5b6126b2848285016124d0565b91505092915050565b6000602082840312156126d1576126d0613753565b5b600082015167ffffffffffffffff8111156126ef576126ee61374e565b5b6126fb848285016124fe565b91505092915050565b61270d816133a6565b82525050565b61271c816133b8565b82525050565b61272b816133c4565b82525050565b61274261273d826133c4565b6135ce565b82525050565b612751816133ce565b82525050565b600061276282613083565b61276c818561308e565b935061277c8185602086016134ef565b61278581613758565b840191505092915050565b600061279b82613083565b6127a5818561309f565b93506127b58185602086016134ef565b80840191505092915050565b6127ca81613498565b82525050565b6127d9816134bc565b82525050565b60006127ec6025836130aa565b91506127f782613783565b604082019050919050565b600061280f6020836130aa565b915061281a826137d2565b602082019050919050565b6000612832602a836130aa565b915061283d826137fb565b604082019050919050565b60006128556026836130aa565b91506128608261384a565b604082019050919050565b60006128786023836130aa565b915061288382613899565b604082019050919050565b600061289b6024836130aa565b91506128a6826138e8565b604082019050919050565b60006128be601f836130aa565b91506128c982613937565b602082019050919050565b60006128e16028836130aa565b91506128ec82613960565b604082019050919050565b6000612904602c836130aa565b915061290f826139af565b604082019050919050565b60006129276030836130aa565b9150612932826139fe565b604082019050919050565b600061294a6023836130aa565b915061295582613a4d565b604082019050919050565b600061296d6037836130aa565b915061297882613a9c565b604082019050919050565b60006129906020836130aa565b915061299b82613aeb565b602082019050919050565b60006129b36014836130aa565b91506129be82613b14565b602082019050919050565b60006129d66015836130aa565b91506129e182613b3d565b602082019050919050565b60006129f9601c836130aa565b9150612a0482613b66565b602082019050919050565b6000612a1c601f836130aa565b9150612a2782613b8f565b602082019050919050565b6000612a3f601e836130aa565b9150612a4a82613bb8565b602082019050919050565b6000612a626027836130aa565b9150612a6d82613be1565b604082019050919050565b6000612a856025836130aa565b9150612a9082613c30565b604082019050919050565b6000612aa8602e836130aa565b9150612ab382613c7f565b604082019050919050565b6000612acb6018836130aa565b9150612ad682613cce565b602082019050919050565b6000612aee6027836130aa565b9150612af982613cf7565b604082019050919050565b6000612b116021836130aa565b9150612b1c82613d46565b604082019050919050565b612b308161341a565b82525050565b612b47612b428261341a565b6135d8565b82525050565b6000612b598285612731565b602082019150612b698284612731565b6020820191508190509392505050565b6000612b858286612b36565b602082019150612b958285612790565b9150612ba18284612b36565b602082019150819050949350505050565b6000612bbe8287612b36565b602082019150612bce8286612b36565b602082019150612bde8285612731565b602082019150612bee8284612731565b60208201915081905095945050505050565b6000602082019050612c156000830184612704565b92915050565b6000604082019050612c306000830185612704565b612c3d6020830184612748565b9392505050565b6000604082019050612c596000830185612704565b8181036020830152612c6b8184612757565b90509392505050565b6000602082019050612c896000830184612713565b92915050565b6000602082019050612ca46000830184612722565b92915050565b60006020820190508181036000830152612cc48184612757565b905092915050565b6000602082019050612ce160008301846127c1565b92915050565b6000602082019050612cfc60008301846127d0565b92915050565b60006020820190508181036000830152612d1b816127df565b9050919050565b60006020820190508181036000830152612d3b81612802565b9050919050565b60006020820190508181036000830152612d5b81612825565b9050919050565b60006020820190508181036000830152612d7b81612848565b9050919050565b60006020820190508181036000830152612d9b8161286b565b9050919050565b60006020820190508181036000830152612dbb8161288e565b9050919050565b60006020820190508181036000830152612ddb816128b1565b9050919050565b60006020820190508181036000830152612dfb816128d4565b9050919050565b60006020820190508181036000830152612e1b816128f7565b9050919050565b60006020820190508181036000830152612e3b8161291a565b9050919050565b60006020820190508181036000830152612e5b8161293d565b9050919050565b60006020820190508181036000830152612e7b81612960565b9050919050565b60006020820190508181036000830152612e9b81612983565b9050919050565b60006020820190508181036000830152612ebb816129a6565b9050919050565b60006020820190508181036000830152612edb816129c9565b9050919050565b60006020820190508181036000830152612efb816129ec565b9050919050565b60006020820190508181036000830152612f1b81612a0f565b9050919050565b60006020820190508181036000830152612f3b81612a32565b9050919050565b60006020820190508181036000830152612f5b81612a55565b9050919050565b60006020820190508181036000830152612f7b81612a78565b9050919050565b60006020820190508181036000830152612f9b81612a9b565b9050919050565b60006020820190508181036000830152612fbb81612abe565b9050919050565b60006020820190508181036000830152612fdb81612ae1565b9050919050565b60006020820190508181036000830152612ffb81612b04565b9050919050565b60006020820190506130176000830184612b27565b92915050565b6000613027613038565b90506130338282613554565b919050565b6000604051905090565b600067ffffffffffffffff82111561305d5761305c613700565b5b61306682613758565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006130c68261341a565b91506130d18361341a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561310657613105613644565b5b828201905092915050565b600061311c8261341a565b91506131278361341a565b92508261313757613136613673565b5b828204905092915050565b600061314d82613424565b915061315883613424565b92508261316857613167613673565b5b828204905092915050565b6000808291508390505b60018511156131bd5780860481111561319957613198613644565b5b60018516156131a85780820291505b80810290506131b685613776565b945061317d565b94509492505050565b60006131d18261341a565b91506131dc8361341a565b92506132097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613211565b905092915050565b60008261322157600190506132dd565b8161322f57600090506132dd565b8160018114613245576002811461324f5761327e565b60019150506132dd565b60ff84111561326157613260613644565b5b8360020a91508482111561327857613277613644565b5b506132dd565b5060208310610133831016604e8410600b84101617156132b35782820a9050838111156132ae576132ad613644565b5b6132dd565b6132c08484846001613173565b925090508184048111156132d7576132d6613644565b5b81810290505b9392505050565b60006132ef8261341a565b91506132fa8361341a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561333357613332613644565b5b828202905092915050565b60006133498261341a565b91506133548361341a565b92508282101561336757613366613644565b5b828203905092915050565b600061337d82613424565b915061338883613424565b92508282101561339b5761339a613644565b5b828203905092915050565b60006133b1826133fa565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061343c82613083565b8261344684613073565b90506134518161372f565b925060048210156134915761348c7fffffffff0000000000000000000000000000000000000000000000000000000083600403600802613769565b831692505b5050919050565b60006134a3826134aa565b9050919050565b60006134b5826133fa565b9050919050565b60006134c7826134ce565b9050919050565b60006134d9826133fa565b9050919050565b82818337600083830152505050565b60005b8381101561350d5780820151818401526020810190506134f2565b8381111561351c576000848401525b50505050565b6000600282049050600182168061353a57607f821691505b6020821081141561354e5761354d6136a2565b5b50919050565b61355d82613758565b810181811067ffffffffffffffff8211171561357c5761357b613700565b5b80604052505050565b60006135908261341a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135c3576135c2613644565b5b600182019050919050565b6000819050919050565b6000819050919050565b60006135ed8261341a565b91506135f88361341a565b92508261360857613607613673565b5b828206905092915050565b600061361e82613424565b915061362983613424565b92508261363957613638613673565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061373b82516133ce565b80915050919050565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b600082821b905092915050565b60008160011c9050919050565b7f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60008201527f454e475448000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54600082015250565b7f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260008201527f4f4f460000000000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560008201527f5353454400000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800600082015250565b7f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60008201527f4d49534d41544348000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60008201527f4754485f4d49534d415443480000000000000000000000000000000000000000602082015250565b7f506f6c79676f6e44414f526f6f743a20612076616c6964207061796c6f61642060008201527f6d7573742062652070726f766964656400000000000000000000000000000000602082015250565b7f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b7f506f6c79676f6e44414f526f6f743a20612076616c696420746172676574206160008201527f646472657373206d7573742062652070726f7669646564000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c69642070726f6f66206c656e677468000000000000000000000000600082015250565b7f4c65616620696e64657820697320746f6f206269670000000000000000000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500600082015250565b7f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000600082015250565b7f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d60008201527f49534d4154434800000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460008201527f554e4e454c000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60008201527f454e4754485f4d49534d41544348000000000000000000000000000000000000602082015250565b7f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000600082015250565b7f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d60008201527f49534d4154434800000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a20494e56414c49445f414444524553535f4c454e475460008201527f4800000000000000000000000000000000000000000000000000000000000000602082015250565b613d9e816133a6565b8114613da957600080fd5b50565b613db5816133c4565b8114613dc057600080fd5b50565b613dcc8161341a565b8114613dd757600080fd5b5056fea2646970667358221220432458c74a41c45adf6aa1d48c73de5a199a35ccf389f1aadea26dd15805d5fd64736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063972c49281161008c578063c67a867511610066578063c67a8675146101dc578063de9b771f146101f8578063f2fde38b14610216578063f953cec714610232576100cf565b8063972c492814610184578063aea4e49e146101a2578063c0857ba0146101be576100cf565b80630e387de6146100d4578063142bc2ae146100f25780634c09e6e814610110578063607f2d421461012c578063715018a61461015c5780638da5cb5b14610166575b600080fd5b6100dc61024e565b6040516100e99190612c8f565b60405180910390f35b6100fa610275565b6040516101079190612caa565b60405180910390f35b61012a60048036038101906101259190612672565b610303565b005b610146600480360381019061014191906125ca565b61038b565b6040516101539190612c74565b60405180910390f35b6101646103ab565b005b61016e6104e8565b60405161017b9190612c00565b60405180910390f35b61018c610512565b6040516101999190612c00565b60405180910390f35b6101bc60048036038101906101b79190612541565b610538565b005b6101c661060d565b6040516101d39190612ccc565b60405180910390f35b6101f660048036038101906101f1919061256e565b610633565b005b6102006107f1565b60405161020d9190612ce7565b60405180910390f35b610230600480360381019061022b9190612541565b610815565b005b61024c60048036038101906102479190612672565b6109c1565b005b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b81565b6005805461028290613522565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90613522565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b61030b6109db565b73ffffffffffffffffffffffffffffffffffffffff166103296104e8565b73ffffffffffffffffffffffffffffffffffffffff161461037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690612e82565b60405180910390fd5b610388816109e3565b50565b60036020528060005260406000206000915054906101000a900460ff1681565b6103b36109db565b73ffffffffffffffffffffffffffffffffffffffff166103d16104e8565b73ffffffffffffffffffffffffffffffffffffffff1614610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e90612e82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c090612d42565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61063b6109db565b73ffffffffffffffffffffffffffffffffffffffff166106596104e8565b73ffffffffffffffffffffffffffffffffffffffff16146106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a690612e82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071690612e62565b60405180910390fd5b600481511015610764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075b90612e22565b60405180910390fd5b60008282604051602001610779929190612c44565b604051602081830303815290604052905061079381610303565b3373ffffffffffffffffffffffffffffffffffffffff167f06039b2b00add27e4381d66dc1498b11ab5105e5a58af184b81783257faf340684846107d690613431565b6040516107e4929190612c1b565b60405180910390a2505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61081d6109db565b73ffffffffffffffffffffffffffffffffffffffff1661083b6104e8565b73ffffffffffffffffffffffffffffffffffffffff1614610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890612e82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f890612d62565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006109cc82610a95565b90506109d781611000565b5050565b600033905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4720477600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610a60929190612c44565b600060405180830381600087803b158015610a7a57600080fd5b505af1158015610a8e573d6000803e3d6000fd5b5050505050565b60606000610aaa610aa58461101a565b61108c565b90506000610ad282600281518110610ac557610ac46136d1565b5b602002602001015161122f565b610afe610af984600881518110610aec57610aeb6136d1565b5b602002602001015161137a565b611478565b610b2284600981518110610b1557610b146136d1565b5b602002602001015161122f565b604051602001610b3493929190612b79565b604051602081830303815290604052805190602001209050600015156003600083815260200190815260200160002060009054906101000a900460ff16151514610bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baa90612da2565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000610c15610c10610c0b85600681518110610bfe57610bfd6136d1565b5b602002602001015161137a565b61101a565b61108c565b90506000610c3d82600381518110610c3057610c2f6136d1565b5b602002602001015161108c565b610c6185600981518110610c5457610c536136d1565b5b602002602001015161122f565b81518110610c7257610c716136d1565b5b602002602001015190506000610c878261108c565b9050610cad81600081518110610ca057610c9f6136d1565b5b602002602001015161168e565b73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3390612f62565b60405180910390fd5b610dd7610d6386600681518110610d5657610d556136d1565b5b602002602001015161137a565b610d8787600881518110610d7a57610d796136d1565b5b602002602001015161137a565b610dab88600781518110610d9e57610d9d6136d1565b5b602002602001015161137a565b610dcf89600581518110610dc257610dc16136d1565b5b602002602001015161122f565b60001b611730565b610e16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0d90612d82565b60405180910390fd5b610efc610e3d86600281518110610e3057610e2f6136d1565b5b602002602001015161122f565b610e6187600381518110610e5457610e536136d1565b5b602002602001015161122f565b610e8588600481518110610e7857610e776136d1565b5b602002602001015161122f565b60001b610eac89600581518110610e9f57610e9e6136d1565b5b602002602001015161122f565b60001b610ed38a600081518110610ec657610ec56136d1565b5b602002602001015161122f565b610ef78b600181518110610eea57610ee96136d1565b5b602002602001015161137a565b611a36565b506000610f2382600181518110610f1657610f156136d1565b5b602002602001015161108c565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610f6d82600081518110610f6057610f5f6136d1565b5b602002602001015161122f565b60001b14610fb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa790612f02565b60405180910390fd5b6000610fd683600281518110610fc957610fc86136d1565b5b602002602001015161137a565b9050600081806020019051810190610fee91906126bb565b90508098505050505050505050919050565b806005908051906020019061101692919061233b565b5050565b6110226123c1565b6000825111611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90612dc2565b60405180910390fd5b600060208301905060405180604001604052808451815260200182815250915050919050565b606061109782611b8c565b6110d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cd90612fa2565b60405180910390fd5b60006110e183611bc5565b905060008167ffffffffffffffff8111156110ff576110fe613700565b5b60405190808252806020026020018201604052801561113857816020015b6111256123c1565b81526020019060019003908161111d5790505b509050600061114a8560200151611c84565b905084600001518114611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990612f42565b60405180910390fd5b60006111a18660200151611d60565b86602001516111b091906130bb565b9050600080600090505b85811015611221576111cb83611c84565b91506040518060400160405280838152602001848152508582815181106111f5576111f46136d1565b5b6020026020010181905250818361120c91906130bb565b9250808061121990613585565b9150506111ba565b508395505050505050919050565b600061123a82611b8c565b1561127a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127190612d22565b60405180910390fd5b6021826000015111156112c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b990612f22565b60405180910390fd5b60006112d18360200151611c84565b905082600001518114611319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131090612fc2565b60405180910390fd5b60006113288460200151611d60565b9050600081856000015161133c919061333e565b905060008083876020015161135191906130bb565b905080519150602083101561136d57826020036101000a820491505b8195505050505050919050565b6060600061138b8360200151611c84565b9050826000015181146113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca90612de2565b60405180910390fd5b60006113e28460200151611d60565b905060008185600001516113f6919061333e565b905060008167ffffffffffffffff81111561141457611413613700565b5b6040519080825280601f01601f1916602001820160405280156114465781602001600182028036833780820191505090505b509050600081602001905061146b84886020015161146491906130bb565b8285611e1f565b8195505050505050919050565b60606000604051806020016040528060008152509050600083511115611685576000806114a6600086611ebc565b60f81c905060018160ff1614806114c0575060038160ff16145b1561158a576001600286516114d591906132e4565b6114df919061333e565b67ffffffffffffffff8111156114f8576114f7613700565b5b6040519080825280601f01601f19166020018201604052801561152a5781602001600182028036833780820191505090505b509250600061153a600187611ebc565b90508084600081518110611551576115506136d1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060019250506115f6565b600280865161159991906132e4565b6115a3919061333e565b67ffffffffffffffff8111156115bc576115bb613700565b5b6040519080825280601f01601f1916602001820160405280156115ee5781602001600182028036833780820191505090505b509250600091505b60008260ff1690505b83518110156116815761162c60028460ff168361161c919061333e565b61162691906130bb565b87611ebc565b84828151811061163f5761163e6136d1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061167990613585565b9150506115ff565b5050505b80915050919050565b600061169982611b8c565b156116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d090612e42565b60405180910390fd5b6015826000015114611720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171790612fe2565b60405180910390fd5b6117298261122f565b9050919050565b60008061173c8461101a565b905060006117498261108c565b9050606080600086905060008061175f8b611478565b905060008151141561177b576000975050505050505050611a2e565b60005b8651811015611a255781518311156117a157600098505050505050505050611a2e565b6117c48782815181106117b7576117b66136d1565b5b6020026020010151611f54565b9550858051906020012084146117e557600098505050505050505050611a2e565b6118088782815181106117fb576117fa6136d1565b5b602002602001015161108c565b94506011855114156118fb578151831415611878578c805190602001206118498660108151811061183c5761183b6136d1565b5b602002602001015161137a565b80519060200120141561186757600198505050505050505050611a2e565b600098505050505050505050611a2e565b600082848151811061188d5761188c6136d1565b5b602001015160f81c60f81b60f81c905060108160ff1611156118bb5760009950505050505050505050611a2e565b6118e1868260ff16815181106118d4576118d36136d1565b5b6020026020010151611fd0565b60001b94506001846118f391906130bb565b935050611a12565b600285511415611a0057600061193561192e87600081518110611921576119206136d1565b5b602002602001015161137a565b8486612094565b90508251818561194591906130bb565b14156119a8578d805190602001206119778760018151811061196a576119696136d1565b5b602002602001015161137a565b8051906020012014156119965760019950505050505050505050611a2e565b60009950505050505050505050611a2e565b60008114156119c35760009950505050505050505050611a2e565b80846119cf91906130bb565b93506119f5866001815181106119e8576119e76136d1565b5b6020026020010151611fd0565b60001b945050611a11565b600098505050505050505050611a2e565b5b8080611a1d90613585565b91505061177e565b50505050505050505b949350505050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341539d4a876040518263ffffffff1660e01b8152600401611a979190613002565b60a06040518083038186803b158015611aaf57600080fd5b505afa158015611ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae791906125f7565b5093505092509250611b3d828b611afe919061333e565b84878d8d8d8d604051602001611b179493929190612bb2565b604051602081830303815290604052805190602001206121ca909392919063ffffffff16565b611b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7390612ee2565b60405180910390fd5b8093505050509695505050505050565b600080600083602001519050805160001a915060c060ff168260ff161015611bb957600092505050611bc0565b6001925050505b919050565b600080600090506000611bdb8460200151611d60565b8460200151611bea91906130bb565b9050600084600001518560200151611c0291906130bb565b90505b80821015611c7957611c1682611c84565b82611c2191906130bb565b915080821115611c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5d90612e02565b60405180910390fd5b8280611c7190613585565b935050611c05565b829350505050919050565b6000806000835160001a9050608060ff16811015611ca55760019150611d56565b60b860ff16811015611cd4576001608060ff1682611cc3919061333e565b611ccd91906130bb565b9150611d55565b60c060ff16811015611d045760b78103600185019450806020036101000a85510460018201810193505050611d54565b60f860ff16811015611d3357600160c060ff1682611d22919061333e565b611d2c91906130bb565b9150611d53565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b600080825160001a9050608060ff16811015611d80576000915050611e1a565b60b860ff16811080611da5575060c060ff168110158015611da4575060f860ff1681105b5b15611db4576001915050611e1a565b60c060ff16811015611def5760018060b8611dcf9190613372565b60ff1682611ddd919061333e565b611de791906130bb565b915050611e1a565b60018060f8611dfe9190613372565b60ff1682611e0c919061333e565b611e1691906130bb565b9150505b919050565b6000811415611e2d57611eb7565b5b602060ff168110611e785782518252602060ff1683611e4d91906130bb565b9250602060ff1682611e5f91906130bb565b9150602060ff1681611e71919061333e565b9050611e2e565b6000600182602060ff16611e8c919061333e565b610100611e9991906131c6565b611ea3919061333e565b905080198451168184511681811785525050505b505050565b600080600284611ecc91906135e2565b14611f0f57601082600285611ee19190613111565b81518110611ef257611ef16136d1565b5b602001015160f81c60f81b60f81c611f0a9190613613565b611f49565b601082600285611f1f9190613111565b81518110611f3057611f2f6136d1565b5b602001015160f81c60f81b60f81c611f489190613142565b5b60f81b905092915050565b60606000826000015167ffffffffffffffff811115611f7657611f75613700565b5b6040519080825280601f01601f191660200182016040528015611fa85781602001600182028036833780820191505090505b5090506000816020019050611fc68460200151828660000151611e1f565b8192505050919050565b600080611fe08360200151611c84565b905082600001518114612028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201f90612f82565b60405180910390fd5b602183600001511461206f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206690612d02565b60405180910390fd5b6000806001856020015161208391906130bb565b905080519150819350505050919050565b6000806000905060006120a686611478565b90506000815167ffffffffffffffff8111156120c5576120c4613700565b5b6040519080825280601f01601f1916602001820160405280156120f75781602001600182028036833780820191505090505b50905060008590505b82518661210d91906130bb565b811015612198576000878281518110612129576121286136d1565b5b602001015160f81c60f81b905080838884612144919061333e565b81518110612155576121546136d1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050808061219090613585565b915050612100565b508080519060200120828051906020012014156121b857815192506121bd565b600092505b8293505050509392505050565b600080602083516121db91906135e2565b1461221b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221290612ea2565b60405180910390fd5b60006020835161222b9190613111565b905080600261223a91906131c6565b851061227b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227290612ec2565b60405180910390fd5b6000808790506000602090505b8551811161232a5780860151925060006002896122a591906135e2565b14156122db5781836040516020016122be929190612b4d565b604051602081830303815290604052805190602001209150612307565b82826040516020016122ee929190612b4d565b6040516020818303038152906040528051906020012091505b6002886123149190613111565b975060208161232391906130bb565b9050612288565b508581149350505050949350505050565b82805461234790613522565b90600052602060002090601f01602090048101928261236957600085556123b0565b82601f1061238257805160ff19168380011785556123b0565b828001600101855582156123b0579182015b828111156123af578251825591602001919060010190612394565b5b5090506123bd91906123db565b5090565b604051806040016040528060008152602001600081525090565b5b808211156123f45760008160009055506001016123dc565b5090565b600061240b61240684613042565b61301d565b90508281526020810184848401111561242757612426613749565b5b6124328482856134e0565b509392505050565b600061244d61244884613042565b61301d565b90508281526020810184848401111561246957612468613749565b5b6124748482856134ef565b509392505050565b60008135905061248b81613d95565b92915050565b6000815190506124a081613d95565b92915050565b6000813590506124b581613dac565b92915050565b6000815190506124ca81613dac565b92915050565b600082601f8301126124e5576124e4613744565b5b81356124f58482602086016123f8565b91505092915050565b600082601f83011261251357612512613744565b5b815161252384826020860161243a565b91505092915050565b60008151905061253b81613dc3565b92915050565b60006020828403121561255757612556613753565b5b60006125658482850161247c565b91505092915050565b6000806040838503121561258557612584613753565b5b60006125938582860161247c565b925050602083013567ffffffffffffffff8111156125b4576125b361374e565b5b6125c0858286016124d0565b9150509250929050565b6000602082840312156125e0576125df613753565b5b60006125ee848285016124a6565b91505092915050565b600080600080600060a0868803121561261357612612613753565b5b6000612621888289016124bb565b95505060206126328882890161252c565b94505060406126438882890161252c565b93505060606126548882890161252c565b925050608061266588828901612491565b9150509295509295909350565b60006020828403121561268857612687613753565b5b600082013567ffffffffffffffff8111156126a6576126a561374e565b5b6126b2848285016124d0565b91505092915050565b6000602082840312156126d1576126d0613753565b5b600082015167ffffffffffffffff8111156126ef576126ee61374e565b5b6126fb848285016124fe565b91505092915050565b61270d816133a6565b82525050565b61271c816133b8565b82525050565b61272b816133c4565b82525050565b61274261273d826133c4565b6135ce565b82525050565b612751816133ce565b82525050565b600061276282613083565b61276c818561308e565b935061277c8185602086016134ef565b61278581613758565b840191505092915050565b600061279b82613083565b6127a5818561309f565b93506127b58185602086016134ef565b80840191505092915050565b6127ca81613498565b82525050565b6127d9816134bc565b82525050565b60006127ec6025836130aa565b91506127f782613783565b604082019050919050565b600061280f6020836130aa565b915061281a826137d2565b602082019050919050565b6000612832602a836130aa565b915061283d826137fb565b604082019050919050565b60006128556026836130aa565b91506128608261384a565b604082019050919050565b60006128786023836130aa565b915061288382613899565b604082019050919050565b600061289b6024836130aa565b91506128a6826138e8565b604082019050919050565b60006128be601f836130aa565b91506128c982613937565b602082019050919050565b60006128e16028836130aa565b91506128ec82613960565b604082019050919050565b6000612904602c836130aa565b915061290f826139af565b604082019050919050565b60006129276030836130aa565b9150612932826139fe565b604082019050919050565b600061294a6023836130aa565b915061295582613a4d565b604082019050919050565b600061296d6037836130aa565b915061297882613a9c565b604082019050919050565b60006129906020836130aa565b915061299b82613aeb565b602082019050919050565b60006129b36014836130aa565b91506129be82613b14565b602082019050919050565b60006129d66015836130aa565b91506129e182613b3d565b602082019050919050565b60006129f9601c836130aa565b9150612a0482613b66565b602082019050919050565b6000612a1c601f836130aa565b9150612a2782613b8f565b602082019050919050565b6000612a3f601e836130aa565b9150612a4a82613bb8565b602082019050919050565b6000612a626027836130aa565b9150612a6d82613be1565b604082019050919050565b6000612a856025836130aa565b9150612a9082613c30565b604082019050919050565b6000612aa8602e836130aa565b9150612ab382613c7f565b604082019050919050565b6000612acb6018836130aa565b9150612ad682613cce565b602082019050919050565b6000612aee6027836130aa565b9150612af982613cf7565b604082019050919050565b6000612b116021836130aa565b9150612b1c82613d46565b604082019050919050565b612b308161341a565b82525050565b612b47612b428261341a565b6135d8565b82525050565b6000612b598285612731565b602082019150612b698284612731565b6020820191508190509392505050565b6000612b858286612b36565b602082019150612b958285612790565b9150612ba18284612b36565b602082019150819050949350505050565b6000612bbe8287612b36565b602082019150612bce8286612b36565b602082019150612bde8285612731565b602082019150612bee8284612731565b60208201915081905095945050505050565b6000602082019050612c156000830184612704565b92915050565b6000604082019050612c306000830185612704565b612c3d6020830184612748565b9392505050565b6000604082019050612c596000830185612704565b8181036020830152612c6b8184612757565b90509392505050565b6000602082019050612c896000830184612713565b92915050565b6000602082019050612ca46000830184612722565b92915050565b60006020820190508181036000830152612cc48184612757565b905092915050565b6000602082019050612ce160008301846127c1565b92915050565b6000602082019050612cfc60008301846127d0565b92915050565b60006020820190508181036000830152612d1b816127df565b9050919050565b60006020820190508181036000830152612d3b81612802565b9050919050565b60006020820190508181036000830152612d5b81612825565b9050919050565b60006020820190508181036000830152612d7b81612848565b9050919050565b60006020820190508181036000830152612d9b8161286b565b9050919050565b60006020820190508181036000830152612dbb8161288e565b9050919050565b60006020820190508181036000830152612ddb816128b1565b9050919050565b60006020820190508181036000830152612dfb816128d4565b9050919050565b60006020820190508181036000830152612e1b816128f7565b9050919050565b60006020820190508181036000830152612e3b8161291a565b9050919050565b60006020820190508181036000830152612e5b8161293d565b9050919050565b60006020820190508181036000830152612e7b81612960565b9050919050565b60006020820190508181036000830152612e9b81612983565b9050919050565b60006020820190508181036000830152612ebb816129a6565b9050919050565b60006020820190508181036000830152612edb816129c9565b9050919050565b60006020820190508181036000830152612efb816129ec565b9050919050565b60006020820190508181036000830152612f1b81612a0f565b9050919050565b60006020820190508181036000830152612f3b81612a32565b9050919050565b60006020820190508181036000830152612f5b81612a55565b9050919050565b60006020820190508181036000830152612f7b81612a78565b9050919050565b60006020820190508181036000830152612f9b81612a9b565b9050919050565b60006020820190508181036000830152612fbb81612abe565b9050919050565b60006020820190508181036000830152612fdb81612ae1565b9050919050565b60006020820190508181036000830152612ffb81612b04565b9050919050565b60006020820190506130176000830184612b27565b92915050565b6000613027613038565b90506130338282613554565b919050565b6000604051905090565b600067ffffffffffffffff82111561305d5761305c613700565b5b61306682613758565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006130c68261341a565b91506130d18361341a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561310657613105613644565b5b828201905092915050565b600061311c8261341a565b91506131278361341a565b92508261313757613136613673565b5b828204905092915050565b600061314d82613424565b915061315883613424565b92508261316857613167613673565b5b828204905092915050565b6000808291508390505b60018511156131bd5780860481111561319957613198613644565b5b60018516156131a85780820291505b80810290506131b685613776565b945061317d565b94509492505050565b60006131d18261341a565b91506131dc8361341a565b92506132097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613211565b905092915050565b60008261322157600190506132dd565b8161322f57600090506132dd565b8160018114613245576002811461324f5761327e565b60019150506132dd565b60ff84111561326157613260613644565b5b8360020a91508482111561327857613277613644565b5b506132dd565b5060208310610133831016604e8410600b84101617156132b35782820a9050838111156132ae576132ad613644565b5b6132dd565b6132c08484846001613173565b925090508184048111156132d7576132d6613644565b5b81810290505b9392505050565b60006132ef8261341a565b91506132fa8361341a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561333357613332613644565b5b828202905092915050565b60006133498261341a565b91506133548361341a565b92508282101561336757613366613644565b5b828203905092915050565b600061337d82613424565b915061338883613424565b92508282101561339b5761339a613644565b5b828203905092915050565b60006133b1826133fa565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061343c82613083565b8261344684613073565b90506134518161372f565b925060048210156134915761348c7fffffffff0000000000000000000000000000000000000000000000000000000083600403600802613769565b831692505b5050919050565b60006134a3826134aa565b9050919050565b60006134b5826133fa565b9050919050565b60006134c7826134ce565b9050919050565b60006134d9826133fa565b9050919050565b82818337600083830152505050565b60005b8381101561350d5780820151818401526020810190506134f2565b8381111561351c576000848401525b50505050565b6000600282049050600182168061353a57607f821691505b6020821081141561354e5761354d6136a2565b5b50919050565b61355d82613758565b810181811067ffffffffffffffff8211171561357c5761357b613700565b5b80604052505050565b60006135908261341a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135c3576135c2613644565b5b600182019050919050565b6000819050919050565b6000819050919050565b60006135ed8261341a565b91506135f88361341a565b92508261360857613607613673565b5b828206905092915050565b600061361e82613424565b915061362983613424565b92508261363957613638613673565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061373b82516133ce565b80915050919050565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b600082821b905092915050565b60008160011c9050919050565b7f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60008201527f454e475448000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54600082015250565b7f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260008201527f4f4f460000000000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560008201527f5353454400000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800600082015250565b7f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60008201527f4d49534d41544348000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60008201527f4754485f4d49534d415443480000000000000000000000000000000000000000602082015250565b7f506f6c79676f6e44414f526f6f743a20612076616c6964207061796c6f61642060008201527f6d7573742062652070726f766964656400000000000000000000000000000000602082015250565b7f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b7f506f6c79676f6e44414f526f6f743a20612076616c696420746172676574206160008201527f646472657373206d7573742062652070726f7669646564000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c69642070726f6f66206c656e677468000000000000000000000000600082015250565b7f4c65616620696e64657820697320746f6f206269670000000000000000000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500600082015250565b7f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000600082015250565b7f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d60008201527f49534d4154434800000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460008201527f554e4e454c000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60008201527f454e4754485f4d49534d41544348000000000000000000000000000000000000602082015250565b7f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000600082015250565b7f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d60008201527f49534d4154434800000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a20494e56414c49445f414444524553535f4c454e475460008201527f4800000000000000000000000000000000000000000000000000000000000000602082015250565b613d9e816133a6565b8114613da957600080fd5b50565b613db5816133c4565b8114613dc057600080fd5b50565b613dcc8161341a565b8114613dd757600080fd5b5056fea2646970667358221220432458c74a41c45adf6aa1d48c73de5a199a35ccf389f1aadea26dd15805d5fd64736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2393,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)2359"
      },
      {
        "astId": 2396,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)2377"
      },
      {
        "astId": 2398,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2402,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 229,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1788,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "latestData",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)2377": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)2359": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}