{
  "address": "0x953E01f0f2E84084765cb7aD9066f1163a919A70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        }
      ],
      "name": "CallOnChild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "callOnChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xce7757617a23d5b776446993275bb55f6d7ba8cc1a67605e5ed980bd8c0052be",
  "receipt": {
    "to": null,
    "from": "0xB011D306D36c396847bA42b1c7AEb8E96C540d9a",
    "contractAddress": "0x953E01f0f2E84084765cb7aD9066f1163a919A70",
    "transactionIndex": 2,
    "gasUsed": "3491221",
    "logsBloom": "0x
    "blockHash": "0xd5d2548776f018a405acb2b5ec71bc320ac6c9366e7fd01ba4e397c76877d209",
    "transactionHash": "0xce7757617a23d5b776446993275bb55f6d7ba8cc1a67605e5ed980bd8c0052be",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 5072783,
        "transactionHash": "0xce7757617a23d5b776446993275bb55f6d7ba8cc1a67605e5ed980bd8c0052be",
        "address": "0x953E01f0f2E84084765cb7aD9066f1163a919A70",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b011d306d36c396847ba42b1c7aeb8e96c540d9a"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xd5d2548776f018a405acb2b5ec71bc320ac6c9366e7fd01ba4e397c76877d209"
      }
    ],
    "blockNumber": 5072783,
    "cumulativeGasUsed": "3564063",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"
  ],
  "solcInputHash": "ccb0235959348758108ea42e9b7d834f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"CallOnChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"callOnChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessageToChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alex T\",\"details\":\"This can be used to forward commands given by the DAO to be executed on the child chain\",\"events\":{\"CallOnChild(address,address,uint256,bytes4)\":{\"details\":\"Emitted when callOnChild is called\",\"params\":{\"caller\":\"Address that called callOnChild\",\"sig\":\"Signature of function that will be called\",\"target\":\"Target of call on the child chain\",\"value\":\"Value to transfer on execution\"}}},\"kind\":\"dev\",\"methods\":{\"callOnChild(address,uint256,bytes)\":{\"details\":\"This is what you will use most of the time. Emits CallOnChild\",\"params\":{\"_data\":\"Calldata for the child tx\",\"_target\":\"Address on child chain against which to execute the tx\",\"_value\":\"Value to transfer\"}},\"constructor\":{\"details\":\"calls FxBaseRootTunnel(_checkpointManager, _fxRoot) \",\"params\":{\"_checkpointManager\":\"Address of RootChainProxy from https://github.com/maticnetwork/static/tree/master/network\",\"_fxRoot\":\"Address of FxStateRootTunnel from https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer/\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendMessageToChild(bytes)\":{\"details\":\"Payload needs to be encoded like abi.encode(_target, _value, _data)\",\"params\":{\"_message\":\"payload to execute on the child chain\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PolygonDAORoot\",\"version\":1},\"userdoc\":{\"events\":{\"CallOnChild(address,address,uint256,bytes4)\":{\"notice\":\"Logs a call being forwarded to the child chain\"}},\"kind\":\"user\",\"methods\":{\"callOnChild(address,uint256,bytes)\":{\"notice\":\"Encodes and sends a payload to be executed on the child chain\"},\"constructor\":{\"notice\":\"PolygonDAORoot constructor\"},\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"},\"sendMessageToChild(bytes)\":{\"notice\":\"Sends a payload to be executed on the child chain\"}},\"notice\":\"Root chain side of a Polygon data bridge meant to execute commands on the child chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolygonDAORoot.sol\":\"PolygonDAORoot\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/PolygonDAORoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {FxBaseRootTunnel} from \\\"./matic/FxBaseRootTunnel.sol\\\";\\n\\n/// @title PolygonDAORoot\\n/// @author Alex T\\n/// @notice Root chain side of a Polygon data bridge meant to execute commands on the child chain\\n/// @dev This can be used to forward commands given by the DAO to be executed on the child chain\\ncontract PolygonDAORoot is FxBaseRootTunnel, Ownable {\\n    bytes public latestData;\\n\\n    /// @notice Logs a call being forwarded to the child chain\\n    /// @dev Emitted when callOnChild is called\\n    /// @param caller Address that called callOnChild\\n    /// @param target Target of call on the child chain\\n    /// @param value Value to transfer on execution\\n    /// @param sig Signature of function that will be called\\n    event CallOnChild(address indexed caller, address target, uint256 value, bytes4 sig);\\n\\n    /// @notice PolygonDAORoot constructor\\n    /// @dev calls FxBaseRootTunnel(_checkpointManager, _fxRoot) \\n    /// @param _checkpointManager Address of RootChainProxy from https://github.com/maticnetwork/static/tree/master/network\\n    /// @param _fxRoot Address of FxStateRootTunnel from https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer/\\n    constructor(address _checkpointManager, address _fxRoot) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n    }\\n\\n    /// @notice Used to receive message from child chain\\n    /// @dev Not currently used\\n    /// @param _data Data received from child chain\\n    function _processMessageFromChild(bytes memory _data) internal override {\\n        latestData = _data;\\n    }\\n\\n    /// @notice Sends a payload to be executed on the child chain\\n    /// @dev Payload needs to be encoded like abi.encode(_target, _value, _data)\\n    /// @param _message payload to execute on the child chain\\n    function sendMessageToChild(bytes memory _message) public onlyOwner {\\n        _sendMessageToChild(_message);\\n    }\\n\\n    /// @notice Encodes and sends a payload to be executed on the child chain\\n    /// @dev This is what you will use most of the time. Emits CallOnChild\\n    /// @param _target Address on child chain against which to execute the tx\\n    /// @param _value Value to transfer\\n    /// @param _data Calldata for the child tx\\n    function callOnChild(address _target, uint256 _value, bytes memory _data) public onlyOwner {\\n        require(_target != address(0), \\\"PolygonDAORoot: a valid target address must be provided\\\");\\n\\n        bytes memory message = abi.encode(_target, _value, _data);\\n        sendMessageToChild(message);\\n\\n        emit CallOnChild(msg.sender, _target, _value, bytes4(_data));\\n    }\\n}\\n\",\"keccak256\":\"0xb24143995c242438535b6a46bc945dca8cac99c6498331e7cedbe7c2345fe890\",\"license\":\"MIT\"},\"contracts/matic/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\n\\nimport {RLPReader} from \\\"./lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"./lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"./lib/Merkle.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages\\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData\\n        .toRlpItem()\\n        .toList();\\n\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                inputDataRLPList[2].toUint(), // blockNumber\\n            // first 2 nibbles are dropped while generating nibble array\\n            // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n            // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\\n                inputDataRLPList[9].toUint() // receiptLogIndex\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6]\\n        .toBytes()\\n        .toRlpItem()\\n        .toList();\\n        RLPReader.RLPItem memory logRLP = receiptRLPList[3]\\n        .toList()[\\n        inputDataRLPList[9].toUint() // receiptLogIndex\\n        ];\\n\\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == RLPReader.toAddress(logRLPList[0]), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                inputDataRLPList[6].toBytes(), // receipt\\n                inputDataRLPList[8].toBytes(), // branchMask\\n                inputDataRLPList[7].toBytes(), // receiptProof\\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            inputDataRLPList[2].toUint(), // blockNumber\\n            inputDataRLPList[3].toUint(), // blockTime\\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\\n            inputDataRLPList[0].toUint(), // headerNumber\\n            inputDataRLPList[1].toBytes() // blockProof\\n        );\\n\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory receivedData = logRLPList[2].toBytes();\\n        (bytes memory message) = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n        bytes32 headerRoot,\\n        uint256 startBlock,\\n        ,\\n        uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n            .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x68abdc4baa2be1b94d2b88683b4ba4d037cd5acad31b6870e6534b3d14c51494\",\"license\":\"MIT\"},\"contracts/matic/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x3e49c8f6baaa902d44bcc7a3637934373c2f2ebcce53fefc6a0c945de3ccb416\",\"license\":\"MIT\"},\"contracts/matic/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf97bce61ab0a63daeaabfba78e8edb58fbd17e9a6d697b2aa478d2cf8346a604\",\"license\":\"MIT\"},\"contracts/matic/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        require(item.length > 0, \\\"RLPReader: INVALID_BYTES_LENGTH\\\");\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item), \\\"RLPReader: ITEM_NOT_LIST\\\");\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: LIST_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_ADDRESS\\\");\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"RLPReader: INVALID_ADDRESS_LENGTH\\\");\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(!isList(item), \\\"RLPReader: DECODING_LIST_AS_UINT\\\");\\n        require(item.len <= 33, \\\"RLPReader: INVALID_UINT_LENGTH\\\");\\n\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_DECODED_LENGTH_MISMATCH\\\");\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        uint256 itemLength = _itemLength(item.memPtr);\\n        require(itemLength == item.len, \\\"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\\\");\\n        // one byte prefix\\n        require(item.len == 33, \\\"RLPReader: INVALID_UINT_STRICT_LENGTH\\\");\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        uint256 listLength = _itemLength(item.memPtr);\\n        require(listLength == item.len, \\\"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\\\");\\n        uint256 offset = _payloadOffset(item.memPtr);\\n\\n        uint256 len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\\n        // require(isList(item), \\\"RLPReader: NUM_ITEMS_NOT_LIST\\\");\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            require(currPtr <= endPtr, \\\"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\\\");\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x994a86e3cad58ab264cf6fb4faa143ddf450fe9e7d5ec22fbeaae5a89bf58001\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003f8238038062003f828339818101604052810190620000379190620001c9565b818181600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620000dc620000d0620000e460201b60201c565b620000ec60201b60201c565b505062000263565b600033905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001c38162000249565b92915050565b60008060408385031215620001e357620001e262000244565b5b6000620001f385828601620001b2565b92505060206200020685828601620001b2565b9150509250929050565b60006200021d8262000224565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620002548162000210565b81146200026057600080fd5b50565b613d0f80620002736000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063972c49281161008c578063c63f47d711610066578063c63f47d7146101dc578063de9b771f146101f8578063f2fde38b14610216578063f953cec714610232576100cf565b8063972c492814610184578063aea4e49e146101a2578063c0857ba0146101be576100cf565b80630e387de6146100d4578063142bc2ae146100f25780634c09e6e814610110578063607f2d421461012c578063715018a61461015c5780638da5cb5b14610166575b600080fd5b6100dc61024e565b6040516100e99190612bfd565b60405180910390f35b6100fa610275565b6040516101079190612c18565b60405180910390f35b61012a600480360381019061012591906125b7565b610303565b005b6101466004803603810190610141919061250f565b61038b565b6040516101539190612be2565b60405180910390f35b6101646103ab565b005b61016e610433565b60405161017b9190612b22565b60405180910390f35b61018c61045d565b6040516101999190612b22565b60405180910390f35b6101bc60048036038101906101b79190612473565b610483565b005b6101c6610558565b6040516101d39190612c3a565b60405180910390f35b6101f660048036038101906101f191906124a0565b61057e565b005b6102006106fc565b60405161020d9190612c55565b60405180910390f35b610230600480360381019061022b9190612473565b610720565b005b61024c600480360381019061024791906125b7565b610818565b005b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b81565b6005805461028290613470565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90613470565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b61030b610832565b73ffffffffffffffffffffffffffffffffffffffff16610329610433565b73ffffffffffffffffffffffffffffffffffffffff161461037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690612dd0565b60405180910390fd5b6103888161083a565b50565b60036020528060005260406000206000915054906101000a900460ff1681565b6103b3610832565b73ffffffffffffffffffffffffffffffffffffffff166103d1610433565b73ffffffffffffffffffffffffffffffffffffffff1614610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e90612dd0565b60405180910390fd5b61043160006108ec565b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050b90612cb0565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610586610832565b73ffffffffffffffffffffffffffffffffffffffff166105a4610433565b73ffffffffffffffffffffffffffffffffffffffff16146105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190612dd0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066190612db0565b60405180910390fd5b600083838360405160200161068193929190612ba4565b604051602081830303815290604052905061069b81610303565b3373ffffffffffffffffffffffffffffffffffffffff167fc3117599841be1778b18e5ac57d6c9b0ac57f20e8bdcd1ff8a5ea4f1c28392498585856106df9061337f565b6040516106ee93929190612b6d565b60405180910390a250505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610728610832565b73ffffffffffffffffffffffffffffffffffffffff16610746610433565b73ffffffffffffffffffffffffffffffffffffffff161461079c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079390612dd0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561080c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080390612cd0565b60405180910390fd5b610815816108ec565b50565b6000610823826109b2565b905061082e81610f1d565b5050565b600033905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4720477600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016108b7929190612b3d565b600060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b5050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060006109c76109c284610f37565b610fa9565b905060006109ef826002815181106109e2576109e161361f565b5b602002602001015161114c565b610a1b610a1684600881518110610a0957610a0861361f565b5b6020026020010151611297565b611395565b610a3f84600981518110610a3257610a3161361f565b5b602002602001015161114c565b604051602001610a5193929190612a9b565b604051602081830303815290604052805190602001209050600015156003600083815260200190815260200160002060009054906101000a900460ff16151514610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac790612d10565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000610b32610b2d610b2885600681518110610b1b57610b1a61361f565b5b6020026020010151611297565b610f37565b610fa9565b90506000610b5a82600381518110610b4d57610b4c61361f565b5b6020026020010151610fa9565b610b7e85600981518110610b7157610b7061361f565b5b602002602001015161114c565b81518110610b8f57610b8e61361f565b5b602002602001015190506000610ba482610fa9565b9050610bca81600081518110610bbd57610bbc61361f565b5b60200260200101516115ab565b73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5090612eb0565b60405180910390fd5b610cf4610c8086600681518110610c7357610c7261361f565b5b6020026020010151611297565b610ca487600881518110610c9757610c9661361f565b5b6020026020010151611297565b610cc888600781518110610cbb57610cba61361f565b5b6020026020010151611297565b610cec89600581518110610cdf57610cde61361f565b5b602002602001015161114c565b60001b61164d565b610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a90612cf0565b60405180910390fd5b610e19610d5a86600281518110610d4d57610d4c61361f565b5b602002602001015161114c565b610d7e87600381518110610d7157610d7061361f565b5b602002602001015161114c565b610da288600481518110610d9557610d9461361f565b5b602002602001015161114c565b60001b610dc989600581518110610dbc57610dbb61361f565b5b602002602001015161114c565b60001b610df08a600081518110610de357610de261361f565b5b602002602001015161114c565b610e148b600181518110610e0757610e0661361f565b5b6020026020010151611297565b611953565b506000610e4082600181518110610e3357610e3261361f565b5b6020026020010151610fa9565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610e8a82600081518110610e7d57610e7c61361f565b5b602002602001015161114c565b60001b14610ecd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec490612e50565b60405180910390fd5b6000610ef383600281518110610ee657610ee561361f565b5b6020026020010151611297565b9050600081806020019051810190610f0b9190612600565b90508098505050505050505050919050565b8060059080519060200190610f33929190612258565b5050565b610f3f6122de565b6000825111610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90612d30565b60405180910390fd5b600060208301905060405180604001604052808451815260200182815250915050919050565b6060610fb482611aa9565b610ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fea90612ef0565b60405180910390fd5b6000610ffe83611ae2565b905060008167ffffffffffffffff81111561101c5761101b61364e565b5b60405190808252806020026020018201604052801561105557816020015b6110426122de565b81526020019060019003908161103a5790505b50905060006110678560200151611ba1565b9050846000015181146110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612e90565b60405180910390fd5b60006110be8660200151611c7d565b86602001516110cd9190613009565b9050600080600090505b8581101561113e576110e883611ba1565b91506040518060400160405280838152602001848152508582815181106111125761111161361f565b5b602002602001018190525081836111299190613009565b92508080611136906134d3565b9150506110d7565b508395505050505050919050565b600061115782611aa9565b15611197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118e90612c90565b60405180910390fd5b6021826000015111156111df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d690612e70565b60405180910390fd5b60006111ee8360200151611ba1565b905082600001518114611236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d90612f10565b60405180910390fd5b60006112458460200151611c7d565b90506000818560000151611259919061328c565b905060008083876020015161126e9190613009565b905080519150602083101561128a57826020036101000a820491505b8195505050505050919050565b606060006112a88360200151611ba1565b9050826000015181146112f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e790612d50565b60405180910390fd5b60006112ff8460200151611c7d565b90506000818560000151611313919061328c565b905060008167ffffffffffffffff8111156113315761133061364e565b5b6040519080825280601f01601f1916602001820160405280156113635781602001600182028036833780820191505090505b50905060008160200190506113888488602001516113819190613009565b8285611d3c565b8195505050505050919050565b606060006040518060200160405280600081525090506000835111156115a2576000806113c3600086611dd9565b60f81c905060018160ff1614806113dd575060038160ff16145b156114a7576001600286516113f29190613232565b6113fc919061328c565b67ffffffffffffffff8111156114155761141461364e565b5b6040519080825280601f01601f1916602001820160405280156114475781602001600182028036833780820191505090505b5092506000611457600187611dd9565b9050808460008151811061146e5761146d61361f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001925050611513565b60028086516114b69190613232565b6114c0919061328c565b67ffffffffffffffff8111156114d9576114d861364e565b5b6040519080825280601f01601f19166020018201604052801561150b5781602001600182028036833780820191505090505b509250600091505b60008260ff1690505b835181101561159e5761154960028460ff1683611539919061328c565b6115439190613009565b87611dd9565b84828151811061155c5761155b61361f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080611596906134d3565b91505061151c565b5050505b80915050919050565b60006115b682611aa9565b156115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed90612d90565b60405180910390fd5b601582600001511461163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163490612f30565b60405180910390fd5b6116468261114c565b9050919050565b60008061165984610f37565b9050600061166682610fa9565b9050606080600086905060008061167c8b611395565b905060008151141561169857600097505050505050505061194b565b60005b86518110156119425781518311156116be5760009850505050505050505061194b565b6116e18782815181106116d4576116d361361f565b5b6020026020010151611e71565b9550858051906020012084146117025760009850505050505050505061194b565b6117258782815181106117185761171761361f565b5b6020026020010151610fa9565b9450601185511415611818578151831415611795578c80519060200120611766866010815181106117595761175861361f565b5b6020026020010151611297565b8051906020012014156117845760019850505050505050505061194b565b60009850505050505050505061194b565b60008284815181106117aa576117a961361f565b5b602001015160f81c60f81b60f81c905060108160ff1611156117d8576000995050505050505050505061194b565b6117fe868260ff16815181106117f1576117f061361f565b5b6020026020010151611eed565b60001b94506001846118109190613009565b93505061192f565b60028551141561191d57600061185261184b8760008151811061183e5761183d61361f565b5b6020026020010151611297565b8486611fb1565b9050825181856118629190613009565b14156118c5578d80519060200120611894876001815181106118875761188661361f565b5b6020026020010151611297565b8051906020012014156118b3576001995050505050505050505061194b565b6000995050505050505050505061194b565b60008114156118e0576000995050505050505050505061194b565b80846118ec9190613009565b9350611912866001815181106119055761190461361f565b5b6020026020010151611eed565b60001b94505061192e565b60009850505050505050505061194b565b5b808061193a906134d3565b91505061169b565b50505050505050505b949350505050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341539d4a876040518263ffffffff1660e01b81526004016119b49190612f50565b60a06040518083038186803b1580156119cc57600080fd5b505afa1580156119e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a04919061253c565b5093505092509250611a5a828b611a1b919061328c565b84878d8d8d8d604051602001611a349493929190612ad4565b604051602081830303815290604052805190602001206120e7909392919063ffffffff16565b611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9090612e30565b60405180910390fd5b8093505050509695505050505050565b600080600083602001519050805160001a915060c060ff168260ff161015611ad657600092505050611add565b6001925050505b919050565b600080600090506000611af88460200151611c7d565b8460200151611b079190613009565b9050600084600001518560200151611b1f9190613009565b90505b80821015611b9657611b3382611ba1565b82611b3e9190613009565b915080821115611b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7a90612d70565b60405180910390fd5b8280611b8e906134d3565b935050611b22565b829350505050919050565b6000806000835160001a9050608060ff16811015611bc25760019150611c73565b60b860ff16811015611bf1576001608060ff1682611be0919061328c565b611bea9190613009565b9150611c72565b60c060ff16811015611c215760b78103600185019450806020036101000a85510460018201810193505050611c71565b60f860ff16811015611c5057600160c060ff1682611c3f919061328c565b611c499190613009565b9150611c70565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b600080825160001a9050608060ff16811015611c9d576000915050611d37565b60b860ff16811080611cc2575060c060ff168110158015611cc1575060f860ff1681105b5b15611cd1576001915050611d37565b60c060ff16811015611d0c5760018060b8611cec91906132c0565b60ff1682611cfa919061328c565b611d049190613009565b915050611d37565b60018060f8611d1b91906132c0565b60ff1682611d29919061328c565b611d339190613009565b9150505b919050565b6000811415611d4a57611dd4565b5b602060ff168110611d955782518252602060ff1683611d6a9190613009565b9250602060ff1682611d7c9190613009565b9150602060ff1681611d8e919061328c565b9050611d4b565b6000600182602060ff16611da9919061328c565b610100611db69190613114565b611dc0919061328c565b905080198451168184511681811785525050505b505050565b600080600284611de99190613530565b14611e2c57601082600285611dfe919061305f565b81518110611e0f57611e0e61361f565b5b602001015160f81c60f81b60f81c611e279190613561565b611e66565b601082600285611e3c919061305f565b81518110611e4d57611e4c61361f565b5b602001015160f81c60f81b60f81c611e659190613090565b5b60f81b905092915050565b60606000826000015167ffffffffffffffff811115611e9357611e9261364e565b5b6040519080825280601f01601f191660200182016040528015611ec55781602001600182028036833780820191505090505b5090506000816020019050611ee38460200151828660000151611d3c565b8192505050919050565b600080611efd8360200151611ba1565b905082600001518114611f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3c90612ed0565b60405180910390fd5b6021836000015114611f8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8390612c70565b60405180910390fd5b60008060018560200151611fa09190613009565b905080519150819350505050919050565b600080600090506000611fc386611395565b90506000815167ffffffffffffffff811115611fe257611fe161364e565b5b6040519080825280601f01601f1916602001820160405280156120145781602001600182028036833780820191505090505b50905060008590505b82518661202a9190613009565b8110156120b55760008782815181106120465761204561361f565b5b602001015160f81c60f81b905080838884612061919061328c565b815181106120725761207161361f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806120ad906134d3565b91505061201d565b508080519060200120828051906020012014156120d557815192506120da565b600092505b8293505050509392505050565b600080602083516120f89190613530565b14612138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212f90612df0565b60405180910390fd5b600060208351612148919061305f565b90508060026121579190613114565b8510612198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218f90612e10565b60405180910390fd5b6000808790506000602090505b855181116122475780860151925060006002896121c29190613530565b14156121f85781836040516020016121db929190612a6f565b604051602081830303815290604052805190602001209150612224565b828260405160200161220b929190612a6f565b6040516020818303038152906040528051906020012091505b600288612231919061305f565b97506020816122409190613009565b90506121a5565b508581149350505050949350505050565b82805461226490613470565b90600052602060002090601f01602090048101928261228657600085556122cd565b82601f1061229f57805160ff19168380011785556122cd565b828001600101855582156122cd579182015b828111156122cc5782518255916020019190600101906122b1565b5b5090506122da91906122f8565b5090565b604051806040016040528060008152602001600081525090565b5b808211156123115760008160009055506001016122f9565b5090565b600061232861232384612f90565b612f6b565b90508281526020810184848401111561234457612343613697565b5b61234f84828561342e565b509392505050565b600061236a61236584612f90565b612f6b565b90508281526020810184848401111561238657612385613697565b5b61239184828561343d565b509392505050565b6000813590506123a881613c94565b92915050565b6000815190506123bd81613c94565b92915050565b6000813590506123d281613cab565b92915050565b6000815190506123e781613cab565b92915050565b600082601f83011261240257612401613692565b5b8135612412848260208601612315565b91505092915050565b600082601f8301126124305761242f613692565b5b8151612440848260208601612357565b91505092915050565b60008135905061245881613cc2565b92915050565b60008151905061246d81613cc2565b92915050565b600060208284031215612489576124886136a1565b5b600061249784828501612399565b91505092915050565b6000806000606084860312156124b9576124b86136a1565b5b60006124c786828701612399565b93505060206124d886828701612449565b925050604084013567ffffffffffffffff8111156124f9576124f861369c565b5b612505868287016123ed565b9150509250925092565b600060208284031215612525576125246136a1565b5b6000612533848285016123c3565b91505092915050565b600080600080600060a08688031215612558576125576136a1565b5b6000612566888289016123d8565b95505060206125778882890161245e565b94505060406125888882890161245e565b93505060606125998882890161245e565b92505060806125aa888289016123ae565b9150509295509295909350565b6000602082840312156125cd576125cc6136a1565b5b600082013567ffffffffffffffff8111156125eb576125ea61369c565b5b6125f7848285016123ed565b91505092915050565b600060208284031215612616576126156136a1565b5b600082015167ffffffffffffffff8111156126345761263361369c565b5b6126408482850161241b565b91505092915050565b612652816132f4565b82525050565b61266181613306565b82525050565b61267081613312565b82525050565b61268761268282613312565b61351c565b82525050565b6126968161331c565b82525050565b60006126a782612fd1565b6126b18185612fdc565b93506126c181856020860161343d565b6126ca816136a6565b840191505092915050565b60006126e082612fd1565b6126ea8185612fed565b93506126fa81856020860161343d565b80840191505092915050565b61270f816133e6565b82525050565b61271e8161340a565b82525050565b6000612731602583612ff8565b915061273c826136d1565b604082019050919050565b6000612754602083612ff8565b915061275f82613720565b602082019050919050565b6000612777602a83612ff8565b915061278282613749565b604082019050919050565b600061279a602683612ff8565b91506127a582613798565b604082019050919050565b60006127bd602383612ff8565b91506127c8826137e7565b604082019050919050565b60006127e0602483612ff8565b91506127eb82613836565b604082019050919050565b6000612803601f83612ff8565b915061280e82613885565b602082019050919050565b6000612826602883612ff8565b9150612831826138ae565b604082019050919050565b6000612849602c83612ff8565b9150612854826138fd565b604082019050919050565b600061286c602383612ff8565b91506128778261394c565b604082019050919050565b600061288f603783612ff8565b915061289a8261399b565b604082019050919050565b60006128b2602083612ff8565b91506128bd826139ea565b602082019050919050565b60006128d5601483612ff8565b91506128e082613a13565b602082019050919050565b60006128f8601583612ff8565b915061290382613a3c565b602082019050919050565b600061291b601c83612ff8565b915061292682613a65565b602082019050919050565b600061293e601f83612ff8565b915061294982613a8e565b602082019050919050565b6000612961601e83612ff8565b915061296c82613ab7565b602082019050919050565b6000612984602783612ff8565b915061298f82613ae0565b604082019050919050565b60006129a7602583612ff8565b91506129b282613b2f565b604082019050919050565b60006129ca602e83612ff8565b91506129d582613b7e565b604082019050919050565b60006129ed601883612ff8565b91506129f882613bcd565b602082019050919050565b6000612a10602783612ff8565b9150612a1b82613bf6565b604082019050919050565b6000612a33602183612ff8565b9150612a3e82613c45565b604082019050919050565b612a5281613368565b82525050565b612a69612a6482613368565b613526565b82525050565b6000612a7b8285612676565b602082019150612a8b8284612676565b6020820191508190509392505050565b6000612aa78286612a58565b602082019150612ab782856126d5565b9150612ac38284612a58565b602082019150819050949350505050565b6000612ae08287612a58565b602082019150612af08286612a58565b602082019150612b008285612676565b602082019150612b108284612676565b60208201915081905095945050505050565b6000602082019050612b376000830184612649565b92915050565b6000604082019050612b526000830185612649565b8181036020830152612b64818461269c565b90509392505050565b6000606082019050612b826000830186612649565b612b8f6020830185612a49565b612b9c604083018461268d565b949350505050565b6000606082019050612bb96000830186612649565b612bc66020830185612a49565b8181036040830152612bd8818461269c565b9050949350505050565b6000602082019050612bf76000830184612658565b92915050565b6000602082019050612c126000830184612667565b92915050565b60006020820190508181036000830152612c32818461269c565b905092915050565b6000602082019050612c4f6000830184612706565b92915050565b6000602082019050612c6a6000830184612715565b92915050565b60006020820190508181036000830152612c8981612724565b9050919050565b60006020820190508181036000830152612ca981612747565b9050919050565b60006020820190508181036000830152612cc98161276a565b9050919050565b60006020820190508181036000830152612ce98161278d565b9050919050565b60006020820190508181036000830152612d09816127b0565b9050919050565b60006020820190508181036000830152612d29816127d3565b9050919050565b60006020820190508181036000830152612d49816127f6565b9050919050565b60006020820190508181036000830152612d6981612819565b9050919050565b60006020820190508181036000830152612d898161283c565b9050919050565b60006020820190508181036000830152612da98161285f565b9050919050565b60006020820190508181036000830152612dc981612882565b9050919050565b60006020820190508181036000830152612de9816128a5565b9050919050565b60006020820190508181036000830152612e09816128c8565b9050919050565b60006020820190508181036000830152612e29816128eb565b9050919050565b60006020820190508181036000830152612e498161290e565b9050919050565b60006020820190508181036000830152612e6981612931565b9050919050565b60006020820190508181036000830152612e8981612954565b9050919050565b60006020820190508181036000830152612ea981612977565b9050919050565b60006020820190508181036000830152612ec98161299a565b9050919050565b60006020820190508181036000830152612ee9816129bd565b9050919050565b60006020820190508181036000830152612f09816129e0565b9050919050565b60006020820190508181036000830152612f2981612a03565b9050919050565b60006020820190508181036000830152612f4981612a26565b9050919050565b6000602082019050612f656000830184612a49565b92915050565b6000612f75612f86565b9050612f8182826134a2565b919050565b6000604051905090565b600067ffffffffffffffff821115612fab57612faa61364e565b5b612fb4826136a6565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061301482613368565b915061301f83613368565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561305457613053613592565b5b828201905092915050565b600061306a82613368565b915061307583613368565b925082613085576130846135c1565b5b828204905092915050565b600061309b82613372565b91506130a683613372565b9250826130b6576130b56135c1565b5b828204905092915050565b6000808291508390505b600185111561310b578086048111156130e7576130e6613592565b5b60018516156130f65780820291505b8081029050613104856136c4565b94506130cb565b94509492505050565b600061311f82613368565b915061312a83613368565b92506131577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461315f565b905092915050565b60008261316f576001905061322b565b8161317d576000905061322b565b8160018114613193576002811461319d576131cc565b600191505061322b565b60ff8411156131af576131ae613592565b5b8360020a9150848211156131c6576131c5613592565b5b5061322b565b5060208310610133831016604e8410600b84101617156132015782820a9050838111156131fc576131fb613592565b5b61322b565b61320e84848460016130c1565b9250905081840481111561322557613224613592565b5b81810290505b9392505050565b600061323d82613368565b915061324883613368565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561328157613280613592565b5b828202905092915050565b600061329782613368565b91506132a283613368565b9250828210156132b5576132b4613592565b5b828203905092915050565b60006132cb82613372565b91506132d683613372565b9250828210156132e9576132e8613592565b5b828203905092915050565b60006132ff82613348565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061338a82612fd1565b8261339484612fc1565b905061339f8161367d565b925060048210156133df576133da7fffffffff00000000000000000000000000000000000000000000000000000000836004036008026136b7565b831692505b5050919050565b60006133f1826133f8565b9050919050565b600061340382613348565b9050919050565b60006134158261341c565b9050919050565b600061342782613348565b9050919050565b82818337600083830152505050565b60005b8381101561345b578082015181840152602081019050613440565b8381111561346a576000848401525b50505050565b6000600282049050600182168061348857607f821691505b6020821081141561349c5761349b6135f0565b5b50919050565b6134ab826136a6565b810181811067ffffffffffffffff821117156134ca576134c961364e565b5b80604052505050565b60006134de82613368565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561351157613510613592565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061353b82613368565b915061354683613368565b925082613556576135556135c1565b5b828206905092915050565b600061356c82613372565b915061357783613372565b925082613587576135866135c1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000613689825161331c565b80915050919050565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b600082821b905092915050565b60008160011c9050919050565b7f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60008201527f454e475448000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54600082015250565b7f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260008201527f4f4f460000000000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560008201527f5353454400000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800600082015250565b7f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60008201527f4d49534d41544348000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60008201527f4754485f4d49534d415443480000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b7f506f6c79676f6e44414f526f6f743a20612076616c696420746172676574206160008201527f646472657373206d7573742062652070726f7669646564000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c69642070726f6f66206c656e677468000000000000000000000000600082015250565b7f4c65616620696e64657820697320746f6f206269670000000000000000000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500600082015250565b7f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000600082015250565b7f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d60008201527f49534d4154434800000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460008201527f554e4e454c000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60008201527f454e4754485f4d49534d41544348000000000000000000000000000000000000602082015250565b7f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000600082015250565b7f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d60008201527f49534d4154434800000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a20494e56414c49445f414444524553535f4c454e475460008201527f4800000000000000000000000000000000000000000000000000000000000000602082015250565b613c9d816132f4565b8114613ca857600080fd5b50565b613cb481613312565b8114613cbf57600080fd5b50565b613ccb81613368565b8114613cd657600080fd5b5056fea2646970667358221220434fde84dfc9db7d2766de0c985904bad7867ef25f0dcd6edc49c9cf450a509f64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063972c49281161008c578063c63f47d711610066578063c63f47d7146101dc578063de9b771f146101f8578063f2fde38b14610216578063f953cec714610232576100cf565b8063972c492814610184578063aea4e49e146101a2578063c0857ba0146101be576100cf565b80630e387de6146100d4578063142bc2ae146100f25780634c09e6e814610110578063607f2d421461012c578063715018a61461015c5780638da5cb5b14610166575b600080fd5b6100dc61024e565b6040516100e99190612bfd565b60405180910390f35b6100fa610275565b6040516101079190612c18565b60405180910390f35b61012a600480360381019061012591906125b7565b610303565b005b6101466004803603810190610141919061250f565b61038b565b6040516101539190612be2565b60405180910390f35b6101646103ab565b005b61016e610433565b60405161017b9190612b22565b60405180910390f35b61018c61045d565b6040516101999190612b22565b60405180910390f35b6101bc60048036038101906101b79190612473565b610483565b005b6101c6610558565b6040516101d39190612c3a565b60405180910390f35b6101f660048036038101906101f191906124a0565b61057e565b005b6102006106fc565b60405161020d9190612c55565b60405180910390f35b610230600480360381019061022b9190612473565b610720565b005b61024c600480360381019061024791906125b7565b610818565b005b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b81565b6005805461028290613470565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90613470565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b61030b610832565b73ffffffffffffffffffffffffffffffffffffffff16610329610433565b73ffffffffffffffffffffffffffffffffffffffff161461037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690612dd0565b60405180910390fd5b6103888161083a565b50565b60036020528060005260406000206000915054906101000a900460ff1681565b6103b3610832565b73ffffffffffffffffffffffffffffffffffffffff166103d1610433565b73ffffffffffffffffffffffffffffffffffffffff1614610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e90612dd0565b60405180910390fd5b61043160006108ec565b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050b90612cb0565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610586610832565b73ffffffffffffffffffffffffffffffffffffffff166105a4610433565b73ffffffffffffffffffffffffffffffffffffffff16146105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190612dd0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066190612db0565b60405180910390fd5b600083838360405160200161068193929190612ba4565b604051602081830303815290604052905061069b81610303565b3373ffffffffffffffffffffffffffffffffffffffff167fc3117599841be1778b18e5ac57d6c9b0ac57f20e8bdcd1ff8a5ea4f1c28392498585856106df9061337f565b6040516106ee93929190612b6d565b60405180910390a250505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610728610832565b73ffffffffffffffffffffffffffffffffffffffff16610746610433565b73ffffffffffffffffffffffffffffffffffffffff161461079c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079390612dd0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561080c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080390612cd0565b60405180910390fd5b610815816108ec565b50565b6000610823826109b2565b905061082e81610f1d565b5050565b600033905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4720477600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016108b7929190612b3d565b600060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b5050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060006109c76109c284610f37565b610fa9565b905060006109ef826002815181106109e2576109e161361f565b5b602002602001015161114c565b610a1b610a1684600881518110610a0957610a0861361f565b5b6020026020010151611297565b611395565b610a3f84600981518110610a3257610a3161361f565b5b602002602001015161114c565b604051602001610a5193929190612a9b565b604051602081830303815290604052805190602001209050600015156003600083815260200190815260200160002060009054906101000a900460ff16151514610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac790612d10565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000610b32610b2d610b2885600681518110610b1b57610b1a61361f565b5b6020026020010151611297565b610f37565b610fa9565b90506000610b5a82600381518110610b4d57610b4c61361f565b5b6020026020010151610fa9565b610b7e85600981518110610b7157610b7061361f565b5b602002602001015161114c565b81518110610b8f57610b8e61361f565b5b602002602001015190506000610ba482610fa9565b9050610bca81600081518110610bbd57610bbc61361f565b5b60200260200101516115ab565b73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5090612eb0565b60405180910390fd5b610cf4610c8086600681518110610c7357610c7261361f565b5b6020026020010151611297565b610ca487600881518110610c9757610c9661361f565b5b6020026020010151611297565b610cc888600781518110610cbb57610cba61361f565b5b6020026020010151611297565b610cec89600581518110610cdf57610cde61361f565b5b602002602001015161114c565b60001b61164d565b610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a90612cf0565b60405180910390fd5b610e19610d5a86600281518110610d4d57610d4c61361f565b5b602002602001015161114c565b610d7e87600381518110610d7157610d7061361f565b5b602002602001015161114c565b610da288600481518110610d9557610d9461361f565b5b602002602001015161114c565b60001b610dc989600581518110610dbc57610dbb61361f565b5b602002602001015161114c565b60001b610df08a600081518110610de357610de261361f565b5b602002602001015161114c565b610e148b600181518110610e0757610e0661361f565b5b6020026020010151611297565b611953565b506000610e4082600181518110610e3357610e3261361f565b5b6020026020010151610fa9565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610e8a82600081518110610e7d57610e7c61361f565b5b602002602001015161114c565b60001b14610ecd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec490612e50565b60405180910390fd5b6000610ef383600281518110610ee657610ee561361f565b5b6020026020010151611297565b9050600081806020019051810190610f0b9190612600565b90508098505050505050505050919050565b8060059080519060200190610f33929190612258565b5050565b610f3f6122de565b6000825111610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90612d30565b60405180910390fd5b600060208301905060405180604001604052808451815260200182815250915050919050565b6060610fb482611aa9565b610ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fea90612ef0565b60405180910390fd5b6000610ffe83611ae2565b905060008167ffffffffffffffff81111561101c5761101b61364e565b5b60405190808252806020026020018201604052801561105557816020015b6110426122de565b81526020019060019003908161103a5790505b50905060006110678560200151611ba1565b9050846000015181146110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612e90565b60405180910390fd5b60006110be8660200151611c7d565b86602001516110cd9190613009565b9050600080600090505b8581101561113e576110e883611ba1565b91506040518060400160405280838152602001848152508582815181106111125761111161361f565b5b602002602001018190525081836111299190613009565b92508080611136906134d3565b9150506110d7565b508395505050505050919050565b600061115782611aa9565b15611197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118e90612c90565b60405180910390fd5b6021826000015111156111df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d690612e70565b60405180910390fd5b60006111ee8360200151611ba1565b905082600001518114611236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d90612f10565b60405180910390fd5b60006112458460200151611c7d565b90506000818560000151611259919061328c565b905060008083876020015161126e9190613009565b905080519150602083101561128a57826020036101000a820491505b8195505050505050919050565b606060006112a88360200151611ba1565b9050826000015181146112f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e790612d50565b60405180910390fd5b60006112ff8460200151611c7d565b90506000818560000151611313919061328c565b905060008167ffffffffffffffff8111156113315761133061364e565b5b6040519080825280601f01601f1916602001820160405280156113635781602001600182028036833780820191505090505b50905060008160200190506113888488602001516113819190613009565b8285611d3c565b8195505050505050919050565b606060006040518060200160405280600081525090506000835111156115a2576000806113c3600086611dd9565b60f81c905060018160ff1614806113dd575060038160ff16145b156114a7576001600286516113f29190613232565b6113fc919061328c565b67ffffffffffffffff8111156114155761141461364e565b5b6040519080825280601f01601f1916602001820160405280156114475781602001600182028036833780820191505090505b5092506000611457600187611dd9565b9050808460008151811061146e5761146d61361f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001925050611513565b60028086516114b69190613232565b6114c0919061328c565b67ffffffffffffffff8111156114d9576114d861364e565b5b6040519080825280601f01601f19166020018201604052801561150b5781602001600182028036833780820191505090505b509250600091505b60008260ff1690505b835181101561159e5761154960028460ff1683611539919061328c565b6115439190613009565b87611dd9565b84828151811061155c5761155b61361f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080611596906134d3565b91505061151c565b5050505b80915050919050565b60006115b682611aa9565b156115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed90612d90565b60405180910390fd5b601582600001511461163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163490612f30565b60405180910390fd5b6116468261114c565b9050919050565b60008061165984610f37565b9050600061166682610fa9565b9050606080600086905060008061167c8b611395565b905060008151141561169857600097505050505050505061194b565b60005b86518110156119425781518311156116be5760009850505050505050505061194b565b6116e18782815181106116d4576116d361361f565b5b6020026020010151611e71565b9550858051906020012084146117025760009850505050505050505061194b565b6117258782815181106117185761171761361f565b5b6020026020010151610fa9565b9450601185511415611818578151831415611795578c80519060200120611766866010815181106117595761175861361f565b5b6020026020010151611297565b8051906020012014156117845760019850505050505050505061194b565b60009850505050505050505061194b565b60008284815181106117aa576117a961361f565b5b602001015160f81c60f81b60f81c905060108160ff1611156117d8576000995050505050505050505061194b565b6117fe868260ff16815181106117f1576117f061361f565b5b6020026020010151611eed565b60001b94506001846118109190613009565b93505061192f565b60028551141561191d57600061185261184b8760008151811061183e5761183d61361f565b5b6020026020010151611297565b8486611fb1565b9050825181856118629190613009565b14156118c5578d80519060200120611894876001815181106118875761188661361f565b5b6020026020010151611297565b8051906020012014156118b3576001995050505050505050505061194b565b6000995050505050505050505061194b565b60008114156118e0576000995050505050505050505061194b565b80846118ec9190613009565b9350611912866001815181106119055761190461361f565b5b6020026020010151611eed565b60001b94505061192e565b60009850505050505050505061194b565b5b808061193a906134d3565b91505061169b565b50505050505050505b949350505050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341539d4a876040518263ffffffff1660e01b81526004016119b49190612f50565b60a06040518083038186803b1580156119cc57600080fd5b505afa1580156119e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a04919061253c565b5093505092509250611a5a828b611a1b919061328c565b84878d8d8d8d604051602001611a349493929190612ad4565b604051602081830303815290604052805190602001206120e7909392919063ffffffff16565b611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9090612e30565b60405180910390fd5b8093505050509695505050505050565b600080600083602001519050805160001a915060c060ff168260ff161015611ad657600092505050611add565b6001925050505b919050565b600080600090506000611af88460200151611c7d565b8460200151611b079190613009565b9050600084600001518560200151611b1f9190613009565b90505b80821015611b9657611b3382611ba1565b82611b3e9190613009565b915080821115611b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7a90612d70565b60405180910390fd5b8280611b8e906134d3565b935050611b22565b829350505050919050565b6000806000835160001a9050608060ff16811015611bc25760019150611c73565b60b860ff16811015611bf1576001608060ff1682611be0919061328c565b611bea9190613009565b9150611c72565b60c060ff16811015611c215760b78103600185019450806020036101000a85510460018201810193505050611c71565b60f860ff16811015611c5057600160c060ff1682611c3f919061328c565b611c499190613009565b9150611c70565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b600080825160001a9050608060ff16811015611c9d576000915050611d37565b60b860ff16811080611cc2575060c060ff168110158015611cc1575060f860ff1681105b5b15611cd1576001915050611d37565b60c060ff16811015611d0c5760018060b8611cec91906132c0565b60ff1682611cfa919061328c565b611d049190613009565b915050611d37565b60018060f8611d1b91906132c0565b60ff1682611d29919061328c565b611d339190613009565b9150505b919050565b6000811415611d4a57611dd4565b5b602060ff168110611d955782518252602060ff1683611d6a9190613009565b9250602060ff1682611d7c9190613009565b9150602060ff1681611d8e919061328c565b9050611d4b565b6000600182602060ff16611da9919061328c565b610100611db69190613114565b611dc0919061328c565b905080198451168184511681811785525050505b505050565b600080600284611de99190613530565b14611e2c57601082600285611dfe919061305f565b81518110611e0f57611e0e61361f565b5b602001015160f81c60f81b60f81c611e279190613561565b611e66565b601082600285611e3c919061305f565b81518110611e4d57611e4c61361f565b5b602001015160f81c60f81b60f81c611e659190613090565b5b60f81b905092915050565b60606000826000015167ffffffffffffffff811115611e9357611e9261364e565b5b6040519080825280601f01601f191660200182016040528015611ec55781602001600182028036833780820191505090505b5090506000816020019050611ee38460200151828660000151611d3c565b8192505050919050565b600080611efd8360200151611ba1565b905082600001518114611f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3c90612ed0565b60405180910390fd5b6021836000015114611f8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8390612c70565b60405180910390fd5b60008060018560200151611fa09190613009565b905080519150819350505050919050565b600080600090506000611fc386611395565b90506000815167ffffffffffffffff811115611fe257611fe161364e565b5b6040519080825280601f01601f1916602001820160405280156120145781602001600182028036833780820191505090505b50905060008590505b82518661202a9190613009565b8110156120b55760008782815181106120465761204561361f565b5b602001015160f81c60f81b905080838884612061919061328c565b815181106120725761207161361f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806120ad906134d3565b91505061201d565b508080519060200120828051906020012014156120d557815192506120da565b600092505b8293505050509392505050565b600080602083516120f89190613530565b14612138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212f90612df0565b60405180910390fd5b600060208351612148919061305f565b90508060026121579190613114565b8510612198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218f90612e10565b60405180910390fd5b6000808790506000602090505b855181116122475780860151925060006002896121c29190613530565b14156121f85781836040516020016121db929190612a6f565b604051602081830303815290604052805190602001209150612224565b828260405160200161220b929190612a6f565b6040516020818303038152906040528051906020012091505b600288612231919061305f565b97506020816122409190613009565b90506121a5565b508581149350505050949350505050565b82805461226490613470565b90600052602060002090601f01602090048101928261228657600085556122cd565b82601f1061229f57805160ff19168380011785556122cd565b828001600101855582156122cd579182015b828111156122cc5782518255916020019190600101906122b1565b5b5090506122da91906122f8565b5090565b604051806040016040528060008152602001600081525090565b5b808211156123115760008160009055506001016122f9565b5090565b600061232861232384612f90565b612f6b565b90508281526020810184848401111561234457612343613697565b5b61234f84828561342e565b509392505050565b600061236a61236584612f90565b612f6b565b90508281526020810184848401111561238657612385613697565b5b61239184828561343d565b509392505050565b6000813590506123a881613c94565b92915050565b6000815190506123bd81613c94565b92915050565b6000813590506123d281613cab565b92915050565b6000815190506123e781613cab565b92915050565b600082601f83011261240257612401613692565b5b8135612412848260208601612315565b91505092915050565b600082601f8301126124305761242f613692565b5b8151612440848260208601612357565b91505092915050565b60008135905061245881613cc2565b92915050565b60008151905061246d81613cc2565b92915050565b600060208284031215612489576124886136a1565b5b600061249784828501612399565b91505092915050565b6000806000606084860312156124b9576124b86136a1565b5b60006124c786828701612399565b93505060206124d886828701612449565b925050604084013567ffffffffffffffff8111156124f9576124f861369c565b5b612505868287016123ed565b9150509250925092565b600060208284031215612525576125246136a1565b5b6000612533848285016123c3565b91505092915050565b600080600080600060a08688031215612558576125576136a1565b5b6000612566888289016123d8565b95505060206125778882890161245e565b94505060406125888882890161245e565b93505060606125998882890161245e565b92505060806125aa888289016123ae565b9150509295509295909350565b6000602082840312156125cd576125cc6136a1565b5b600082013567ffffffffffffffff8111156125eb576125ea61369c565b5b6125f7848285016123ed565b91505092915050565b600060208284031215612616576126156136a1565b5b600082015167ffffffffffffffff8111156126345761263361369c565b5b6126408482850161241b565b91505092915050565b612652816132f4565b82525050565b61266181613306565b82525050565b61267081613312565b82525050565b61268761268282613312565b61351c565b82525050565b6126968161331c565b82525050565b60006126a782612fd1565b6126b18185612fdc565b93506126c181856020860161343d565b6126ca816136a6565b840191505092915050565b60006126e082612fd1565b6126ea8185612fed565b93506126fa81856020860161343d565b80840191505092915050565b61270f816133e6565b82525050565b61271e8161340a565b82525050565b6000612731602583612ff8565b915061273c826136d1565b604082019050919050565b6000612754602083612ff8565b915061275f82613720565b602082019050919050565b6000612777602a83612ff8565b915061278282613749565b604082019050919050565b600061279a602683612ff8565b91506127a582613798565b604082019050919050565b60006127bd602383612ff8565b91506127c8826137e7565b604082019050919050565b60006127e0602483612ff8565b91506127eb82613836565b604082019050919050565b6000612803601f83612ff8565b915061280e82613885565b602082019050919050565b6000612826602883612ff8565b9150612831826138ae565b604082019050919050565b6000612849602c83612ff8565b9150612854826138fd565b604082019050919050565b600061286c602383612ff8565b91506128778261394c565b604082019050919050565b600061288f603783612ff8565b915061289a8261399b565b604082019050919050565b60006128b2602083612ff8565b91506128bd826139ea565b602082019050919050565b60006128d5601483612ff8565b91506128e082613a13565b602082019050919050565b60006128f8601583612ff8565b915061290382613a3c565b602082019050919050565b600061291b601c83612ff8565b915061292682613a65565b602082019050919050565b600061293e601f83612ff8565b915061294982613a8e565b602082019050919050565b6000612961601e83612ff8565b915061296c82613ab7565b602082019050919050565b6000612984602783612ff8565b915061298f82613ae0565b604082019050919050565b60006129a7602583612ff8565b91506129b282613b2f565b604082019050919050565b60006129ca602e83612ff8565b91506129d582613b7e565b604082019050919050565b60006129ed601883612ff8565b91506129f882613bcd565b602082019050919050565b6000612a10602783612ff8565b9150612a1b82613bf6565b604082019050919050565b6000612a33602183612ff8565b9150612a3e82613c45565b604082019050919050565b612a5281613368565b82525050565b612a69612a6482613368565b613526565b82525050565b6000612a7b8285612676565b602082019150612a8b8284612676565b6020820191508190509392505050565b6000612aa78286612a58565b602082019150612ab782856126d5565b9150612ac38284612a58565b602082019150819050949350505050565b6000612ae08287612a58565b602082019150612af08286612a58565b602082019150612b008285612676565b602082019150612b108284612676565b60208201915081905095945050505050565b6000602082019050612b376000830184612649565b92915050565b6000604082019050612b526000830185612649565b8181036020830152612b64818461269c565b90509392505050565b6000606082019050612b826000830186612649565b612b8f6020830185612a49565b612b9c604083018461268d565b949350505050565b6000606082019050612bb96000830186612649565b612bc66020830185612a49565b8181036040830152612bd8818461269c565b9050949350505050565b6000602082019050612bf76000830184612658565b92915050565b6000602082019050612c126000830184612667565b92915050565b60006020820190508181036000830152612c32818461269c565b905092915050565b6000602082019050612c4f6000830184612706565b92915050565b6000602082019050612c6a6000830184612715565b92915050565b60006020820190508181036000830152612c8981612724565b9050919050565b60006020820190508181036000830152612ca981612747565b9050919050565b60006020820190508181036000830152612cc98161276a565b9050919050565b60006020820190508181036000830152612ce98161278d565b9050919050565b60006020820190508181036000830152612d09816127b0565b9050919050565b60006020820190508181036000830152612d29816127d3565b9050919050565b60006020820190508181036000830152612d49816127f6565b9050919050565b60006020820190508181036000830152612d6981612819565b9050919050565b60006020820190508181036000830152612d898161283c565b9050919050565b60006020820190508181036000830152612da98161285f565b9050919050565b60006020820190508181036000830152612dc981612882565b9050919050565b60006020820190508181036000830152612de9816128a5565b9050919050565b60006020820190508181036000830152612e09816128c8565b9050919050565b60006020820190508181036000830152612e29816128eb565b9050919050565b60006020820190508181036000830152612e498161290e565b9050919050565b60006020820190508181036000830152612e6981612931565b9050919050565b60006020820190508181036000830152612e8981612954565b9050919050565b60006020820190508181036000830152612ea981612977565b9050919050565b60006020820190508181036000830152612ec98161299a565b9050919050565b60006020820190508181036000830152612ee9816129bd565b9050919050565b60006020820190508181036000830152612f09816129e0565b9050919050565b60006020820190508181036000830152612f2981612a03565b9050919050565b60006020820190508181036000830152612f4981612a26565b9050919050565b6000602082019050612f656000830184612a49565b92915050565b6000612f75612f86565b9050612f8182826134a2565b919050565b6000604051905090565b600067ffffffffffffffff821115612fab57612faa61364e565b5b612fb4826136a6565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061301482613368565b915061301f83613368565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561305457613053613592565b5b828201905092915050565b600061306a82613368565b915061307583613368565b925082613085576130846135c1565b5b828204905092915050565b600061309b82613372565b91506130a683613372565b9250826130b6576130b56135c1565b5b828204905092915050565b6000808291508390505b600185111561310b578086048111156130e7576130e6613592565b5b60018516156130f65780820291505b8081029050613104856136c4565b94506130cb565b94509492505050565b600061311f82613368565b915061312a83613368565b92506131577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461315f565b905092915050565b60008261316f576001905061322b565b8161317d576000905061322b565b8160018114613193576002811461319d576131cc565b600191505061322b565b60ff8411156131af576131ae613592565b5b8360020a9150848211156131c6576131c5613592565b5b5061322b565b5060208310610133831016604e8410600b84101617156132015782820a9050838111156131fc576131fb613592565b5b61322b565b61320e84848460016130c1565b9250905081840481111561322557613224613592565b5b81810290505b9392505050565b600061323d82613368565b915061324883613368565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561328157613280613592565b5b828202905092915050565b600061329782613368565b91506132a283613368565b9250828210156132b5576132b4613592565b5b828203905092915050565b60006132cb82613372565b91506132d683613372565b9250828210156132e9576132e8613592565b5b828203905092915050565b60006132ff82613348565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061338a82612fd1565b8261339484612fc1565b905061339f8161367d565b925060048210156133df576133da7fffffffff00000000000000000000000000000000000000000000000000000000836004036008026136b7565b831692505b5050919050565b60006133f1826133f8565b9050919050565b600061340382613348565b9050919050565b60006134158261341c565b9050919050565b600061342782613348565b9050919050565b82818337600083830152505050565b60005b8381101561345b578082015181840152602081019050613440565b8381111561346a576000848401525b50505050565b6000600282049050600182168061348857607f821691505b6020821081141561349c5761349b6135f0565b5b50919050565b6134ab826136a6565b810181811067ffffffffffffffff821117156134ca576134c961364e565b5b80604052505050565b60006134de82613368565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561351157613510613592565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061353b82613368565b915061354683613368565b925082613556576135556135c1565b5b828206905092915050565b600061356c82613372565b915061357783613372565b925082613587576135866135c1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000613689825161331c565b80915050919050565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b600082821b905092915050565b60008160011c9050919050565b7f524c505265616465723a20494e56414c49445f55494e545f5354524943545f4c60008201527f454e475448000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204445434f44494e475f4c4953545f41535f55494e54600082015250565b7f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260008201527f4f4f460000000000000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560008201527f5353454400000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a20494e56414c49445f42595445535f4c454e47544800600082015250565b7f524c505265616465723a2042595445535f4445434f4445445f4c454e4754485f60008201527f4d49534d41544348000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204e554d5f4954454d535f4445434f4445445f4c454e60008201527f4754485f4d49534d415443480000000000000000000000000000000000000000602082015250565b7f524c505265616465723a204445434f44494e475f4c4953545f41535f4144445260008201527f4553530000000000000000000000000000000000000000000000000000000000602082015250565b7f506f6c79676f6e44414f526f6f743a20612076616c696420746172676574206160008201527f646472657373206d7573742062652070726f7669646564000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e76616c69642070726f6f66206c656e677468000000000000000000000000600082015250565b7f4c65616620696e64657820697320746f6f206269670000000000000000000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000600082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500600082015250565b7f524c505265616465723a20494e56414c49445f55494e545f4c454e4754480000600082015250565b7f524c505265616465723a204c4953545f4445434f4445445f4c454e4754485f4d60008201527f49534d4154434800000000000000000000000000000000000000000000000000602082015250565b7f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460008201527f554e4e454c000000000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a2055494e545f5354524943545f4445434f4445445f4c60008201527f454e4754485f4d49534d41544348000000000000000000000000000000000000602082015250565b7f524c505265616465723a204954454d5f4e4f545f4c4953540000000000000000600082015250565b7f524c505265616465723a2055494e545f4445434f4445445f4c454e4754485f4d60008201527f49534d4154434800000000000000000000000000000000000000000000000000602082015250565b7f524c505265616465723a20494e56414c49445f414444524553535f4c454e475460008201527f4800000000000000000000000000000000000000000000000000000000000000602082015250565b613c9d816132f4565b8114613ca857600080fd5b50565b613cb481613312565b8114613cbf57600080fd5b50565b613ccb81613368565b8114613cd657600080fd5b5056fea2646970667358221220434fde84dfc9db7d2766de0c985904bad7867ef25f0dcd6edc49c9cf450a509f64736f6c63430008060033",
  "devdoc": {
    "author": "Alex T",
    "details": "This can be used to forward commands given by the DAO to be executed on the child chain",
    "events": {
      "CallOnChild(address,address,uint256,bytes4)": {
        "details": "Emitted when callOnChild is called",
        "params": {
          "caller": "Address that called callOnChild",
          "sig": "Signature of function that will be called",
          "target": "Target of call on the child chain",
          "value": "Value to transfer on execution"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "callOnChild(address,uint256,bytes)": {
        "details": "This is what you will use most of the time. Emits CallOnChild",
        "params": {
          "_data": "Calldata for the child tx",
          "_target": "Address on child chain against which to execute the tx",
          "_value": "Value to transfer"
        }
      },
      "constructor": {
        "details": "calls FxBaseRootTunnel(_checkpointManager, _fxRoot) ",
        "params": {
          "_checkpointManager": "Address of RootChainProxy from https://github.com/maticnetwork/static/tree/master/network",
          "_fxRoot": "Address of FxStateRootTunnel from https://docs.matic.network/docs/develop/l1-l2-communication/state-transfer/"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendMessageToChild(bytes)": {
        "details": "Payload needs to be encoded like abi.encode(_target, _value, _data)",
        "params": {
          "_message": "payload to execute on the child chain"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PolygonDAORoot",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CallOnChild(address,address,uint256,bytes4)": {
        "notice": "Logs a call being forwarded to the child chain"
      }
    },
    "kind": "user",
    "methods": {
      "callOnChild(address,uint256,bytes)": {
        "notice": "Encodes and sends a payload to be executed on the child chain"
      },
      "constructor": {
        "notice": "PolygonDAORoot constructor"
      },
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      },
      "sendMessageToChild(bytes)": {
        "notice": "Sends a payload to be executed on the child chain"
      }
    },
    "notice": "Root chain side of a Polygon data bridge meant to execute commands on the child chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2485,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)2451"
      },
      {
        "astId": 2488,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)2469"
      },
      {
        "astId": 2490,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2494,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 229,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1846,
        "contract": "contracts/PolygonDAORoot.sol:PolygonDAORoot",
        "label": "latestData",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)2469": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)2451": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}